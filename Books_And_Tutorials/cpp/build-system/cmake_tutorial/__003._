<!DOCTYPE html>
<!--[if IE 8]>
<html id="ie8" lang="en-US" prefix="og: http://ogp.me/ns#"><![endif]-->
<!--[if !(IE 8) ]><!-->
<html lang="en-US" prefix="og: http://ogp.me/ns#">
<!--<![endif]-->
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width" />
  <title>CMake Tutorial - Chapter&nbsp;3: GUI Tool - JohnLamp.netJohnLamp.net</title>
  <link rel="profile" href="http://gmpg.org/xfn/11" />
  <link rel="pingback" href="https://www.johnlamp.net/xmlrpc.php" />
  <!--[if lt IE 9]>
  <script src="https://www.johnlamp.net/wp-content/themes/tutorial-theme/js/html5.js" type="text/javascript"></script>
  <![endif]-->
  
<!-- This site is optimized with the Yoast SEO plugin v3.0.4 - https://yoast.com/wordpress/plugins/seo/ -->
<link rel="canonical" href="https://www.johnlamp.net/cmake-tutorial-3-gui-tool.html" />
<meta property="og:locale" content="en_US" />
<meta property="og:type" content="article" />
<meta property="og:title" content="CMake Tutorial - Chapter&nbsp;3: GUI Tool - JohnLamp.net" />
<meta property="og:description" content="Although when we looked at IDE projects generated by CMake we still used the
    command line. You can also use the CMake GUI to generate and configure
    projects. This can be convenient if you don&#039;t like the command line, however
    it can be even more useful than that.
  
  
    CMake stores a lot of configuration settings &hellip;Continue reading &quot;CMake Tutorial &#8211; Chapter&nbsp;3: GUI Tool&quot;" />
<meta property="og:url" content="https://www.johnlamp.net/cmake-tutorial-3-gui-tool.html" />
<meta property="og:site_name" content="JohnLamp.net" />
<meta property="article:tag" content="CMake" />
<meta property="article:tag" content="long" />
<meta property="article:tag" content="tutorial" />
<meta property="article:section" content="CMake Tutorial" />
<meta property="article:published_time" content="2013-03-28T19:34:23+00:00" />
<meta property="article:modified_time" content="2015-03-03T21:38:16+00:00" />
<meta property="og:updated_time" content="2015-03-03T21:38:16+00:00" />
<meta property="og:image" content="https://www.johnlamp.net/images/zip.png" />
<meta property="og:image" content="https://www.johnlamp.net/screenshots/cmt-3/blank.png" />
<meta property="og:image" content="https://www.johnlamp.net/screenshots/cmt-3/generator.png" />
<meta property="og:image" content="https://www.johnlamp.net/screenshots/cmt-3/firstConfigure.png" />
<meta property="og:image" content="https://www.johnlamp.net/screenshots/cmt-3/advanced.png" />
<meta property="og:image" content="https://www.johnlamp.net/screenshots/cmt-3/ccmake.png" />
<!-- / Yoast SEO plugin. -->

<link rel="alternate" type="application/rss+xml" title="JohnLamp.net &raquo; Feed" href="https://www.johnlamp.net/feed" />
<link rel="alternate" type="application/rss+xml" title="JohnLamp.net &raquo; Comments Feed" href="https://www.johnlamp.net/comments/feed" />
<link rel="alternate" type="application/rss+xml" title="JohnLamp.net &raquo; CMake Tutorial &#8211; Chapter&nbsp;3: GUI Tool Comments Feed" href="https://www.johnlamp.net/cmake-tutorial-3-gui-tool.html/feed" />
		<script type="text/javascript">
			window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/72x72\/","ext":".png","source":{"concatemoji":"https:\/\/www.johnlamp.net\/wp-includes\/js\/wp-emoji-release.min.js?ver=4.3.1"}};
			!function(a,b,c){function d(a){var c=b.createElement("canvas"),d=c.getContext&&c.getContext("2d");return d&&d.fillText?(d.textBaseline="top",d.font="600 32px Arial","flag"===a?(d.fillText(String.fromCharCode(55356,56812,55356,56807),0,0),c.toDataURL().length>3e3):(d.fillText(String.fromCharCode(55357,56835),0,0),0!==d.getImageData(16,16,1,1).data[0])):!1}function e(a){var c=b.createElement("script");c.src=a,c.type="text/javascript",b.getElementsByTagName("head")[0].appendChild(c)}var f,g;c.supports={simple:d("simple"),flag:d("flag")},c.DOMReady=!1,c.readyCallback=function(){c.DOMReady=!0},c.supports.simple&&c.supports.flag||(g=function(){c.readyCallback()},b.addEventListener?(b.addEventListener("DOMContentLoaded",g,!1),a.addEventListener("load",g,!1)):(a.attachEvent("onload",g),b.attachEvent("onreadystatechange",function(){"complete"===b.readyState&&c.readyCallback()})),f=c.source||{},f.concatemoji?e(f.concatemoji):f.wpemoji&&f.twemoji&&(e(f.twemoji),e(f.wpemoji)))}(window,document,window._wpemojiSettings);
		</script>
		<style type="text/css">
img.wp-smiley,
img.emoji {
	display: inline !important;
	border: none !important;
	box-shadow: none !important;
	height: 1em !important;
	width: 1em !important;
	margin: 0 .07em !important;
	vertical-align: -0.1em !important;
	background: none !important;
	padding: 0 !important;
}
</style>
<link rel='stylesheet' id='style-css'  href='https://www.johnlamp.net/wp-content/themes/tutorial-theme/style.css?ver=4.3.1' type='text/css' media='all' />
<script type='text/javascript' src='https://www.johnlamp.net/wp-includes/js/jquery/jquery.js?ver=1.11.3'></script>
<script type='text/javascript' src='https://www.johnlamp.net/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1'></script>
<link rel='shortlink' href='https://www.johnlamp.net/?p=18' />
<style type="text/css">.site-title a,.site-description{color: #f57900 !important;\n}</style></head>
<body class="single single-post postid-18 single-format-standard">
<div id="page" class="hfeed site">
  <header id="masthead" class="site-header" role="banner">
    <a href="https://www.johnlamp.net/" title="JohnLamp.net" rel="home"><img src="https://www.johnlamp.net/wp-content/uploads/2014/09/JL-Symbol.png" width="87" height="90" style="width: 87px; height: 90px;" alt="" /></a>    <div class="hgroup">
      <h1 class="site-title">
        <a href="https://www.johnlamp.net/" title="JohnLamp.net" rel="home">JohnLamp.net</a>
      </h1>
      <h2 class="site-description">
              </h2>
    </div>

    <div id="search">
      <form method="get" id="searchform" action="https://www.johnlamp.net/" role="search"><label for="searchInput" class="assistive-text">Search</label><input type="text" class="field" name="searchInput" value="" id="searchInput" placeholder="Search &hellip;" /><input type="submit" id="searchsubmit" class="submit" value="Search" /></form>    </div>

    <nav id="site-navigation" role="navigation" class="main-navigation">
      <h1 class="assistive-text">
        Menu      </h1>
      <div class="assistive-text skip-link">
        <a href="#content" title="Skip to content">Skip to content</a>
      </div>
      <div class="menu-main-menu-container"><ul id="menu-main-menu" class="menu"><li id="menu-item-4" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-4"><a href="https://www.johnlamp.net/">Home</a></li>
<li id="menu-item-10" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-10"><a href="https://www.johnlamp.net/cmake-tutorial.html">CMake Tutorial</a></li>
</ul></div>    </nav>
    <div class="cleared"></div>
  </header>
  <div id="main" class="site-main">

<div id="primary" class="content-area">
  <div id="content" class="site-content" role="main">

    <nav role="navigation" id="nav-above" class="site-navigation post-navigation"><h1 class="assistive-text">Post navigation</h1><div class="nav-previous"><a href="https://www.johnlamp.net/cmake-tutorial-2-ide-integration.html" rel="prev"><span class="meta-nav">&larr;</span> CMake Tutorial &#8211; Chapter&nbsp;2: IDE Integration</a></div><div class="nav-next"><a href="https://www.johnlamp.net/cmake-tutorial-4-libraries-and-subdirectories.html" rel="next">CMake Tutorial &#8211; Chapter&nbsp;4: Libraries and Subdirectories <span class="meta-nav">&rarr;</span></a></div></nav>

<article id="post-18" class="post-18 post type-post status-publish format-standard hentry category-cmake-tutorial tag-cmake tag-long tag-tutorial">
  <header class="entry-header">
    <h1 class="entry-title">
      CMake Tutorial &#8211; Chapter&nbsp;3: GUI Tool    </h1>

    <div class="entry-meta">
      Posted on <a href="https://www.johnlamp.net/cmake-tutorial-3-gui-tool.html" title="19:34:23" rel="bookmark"><time class="entry-date" datetime="2013-03-28T19:34:23+00:00">2013-03-28</time></a> <span class="byline">by <span class="author vcard"><a class="url fn n" href="https://www.johnlamp.net/author/john" title="View all posts by John Lamp" rel="author">John Lamp</a></span></span>    </div>
  </header>

  <div class="entry-content">
    <nav class="contents"><h1>Contents</h1><ol><li><a href="#section-Introduction">Introduction</a></li><li><a href="#section-FirstFixAWarning">First Fix a Warning</a></li><li><a href="#section-CmakeGui">CMake GUI</a></li><li><ol><li><a href="#section-GeneratingOurProject">Generating Our Project</a></li><li><a href="#section-CmakeCache">CMake Cache</a></li></ol></li><li><a href="#section-CmakeCursesInterface">CMake Curses Interface</a></li><li><ol><li><a href="#section-IntroducingCcmake">Introducing <code>ccmake</code></a></li><li><a href="#section-UsefulMakefileTargets">Useful Makefile Targets</a></li></ol></li></ol></nav>
<section>
  <h1 id="section-Introduction">Introduction</h1>
  <p>
    Although when we looked at IDE projects generated by CMake we still used the
    command line. You can also use the CMake GUI to generate and configure
    projects. This can be convenient if you don&#8217;t like the command line, however
    it can be even more useful than that.
  </p>
  <p>
    CMake stores a lot of configuration settings in the project&#8217;s cache. This
    cache can be viewed and edited using the CMake GUI. This can be quite useful
    for seeing how a project is configured as the settings are presented in a
    nice list. You can also change these values so you can set your build type
    to &#8220;Release&#8221; to make a release build or you can add specific compiler flags.
  </p>
</section>

<section>
  <h1 id="section-FirstFixAWarning">First Fix a Warning</h1>
  <p>
    In <a href="https://www.johnlamp.net/cmake-tutorial-2-ide-integration.html#section-Xcode">chapter 2</a>    when covering the Xcode generator I said that I&#8217;d fix the warning we saw
    later. Well it looks like later has come. The first thing we need to do
    is give the compiler some more flags so that we can reproduce the warning.
  </p>
  <section class="code cmake">
<header class="clear-after"><h1>CMakeLists.txt</h1>
<div class="hll legend">New or modified lines in bold.</div></header><div class="highlight"><pre><a id="CMakeLists.txt-1" class="line-number" href="#CMakeLists.txt-1"></a><span class="nb">cmake_minimum_required</span><span class="p">(</span><span class="s">VERSION</span> <span class="s">2.8</span> <span class="s">FATAL_ERROR</span><span class="p">)</span>
<a id="CMakeLists.txt-2" class="line-number" href="#CMakeLists.txt-2"></a><span class="nb">set</span><span class="p">(</span><span class="s">CMAKE_LEGACY_CYGWIN_WIN32</span> <span class="s">0</span><span class="p">)</span>
<a id="CMakeLists.txt-3" class="line-number" href="#CMakeLists.txt-3"></a>
<a id="CMakeLists.txt-4" class="line-number" href="#CMakeLists.txt-4"></a><span class="nb">project</span><span class="p">(</span><span class="s2">&quot;To Do List&quot;</span><span class="p">)</span>
<a id="CMakeLists.txt-5" class="line-number" href="#CMakeLists.txt-5"></a>
<a id="CMakeLists.txt-6" class="line-number" href="#CMakeLists.txt-6"></a><span class="nb">enable_testing</span><span class="p">()</span>
<a id="CMakeLists.txt-7" class="line-number" href="#CMakeLists.txt-7"></a>
<a id="CMakeLists.txt-8" class="line-number" href="#CMakeLists.txt-8"></a>
<a id="CMakeLists.txt-9" class="line-number" href="#CMakeLists.txt-9"></a><span class="hll"><span class="nb">if</span> <span class="p">(</span><span class="s2">&quot;${CMAKE_CXX_COMPILER_ID}&quot;</span> <span class="s">STREQUAL</span> <span class="s2">&quot;GNU&quot;</span> <span class="s">OR</span>
</span><a id="CMakeLists.txt-10" class="line-number" href="#CMakeLists.txt-10"></a><span class="hll">    <span class="s2">&quot;${CMAKE_CXX_COMPILER_ID}&quot;</span> <span class="s">STREQUAL</span> <span class="s2">&quot;Clang&quot;</span><span class="p">)</span>
</span><a id="CMakeLists.txt-11" class="line-number" href="#CMakeLists.txt-11"></a><span class="hll">    <span class="nb">set</span><span class="p">(</span><span class="s">warnings</span> <span class="s2">&quot;-Wall -Wextra -Werror&quot;</span><span class="p">)</span>
</span><a id="CMakeLists.txt-12" class="line-number" href="#CMakeLists.txt-12"></a><span class="hll"><span class="nb">elseif</span> <span class="p">(</span><span class="s2">&quot;${CMAKE_CXX_COMPILER_ID}&quot;</span> <span class="s">STREQUAL</span> <span class="s2">&quot;MSVC&quot;</span><span class="p">)</span>
</span><a id="CMakeLists.txt-13" class="line-number" href="#CMakeLists.txt-13"></a><span class="hll">    <span class="nb">set</span><span class="p">(</span><span class="s">warnings</span> <span class="s2">&quot;/W4 /WX /EHsc&quot;</span><span class="p">)</span>
</span><a id="CMakeLists.txt-14" class="line-number" href="#CMakeLists.txt-14"></a><span class="hll"><span class="nb">endif</span><span class="p">()</span>
</span><a id="CMakeLists.txt-15" class="line-number" href="#CMakeLists.txt-15"></a><span class="hll"><span class="nb">set</span><span class="p">(</span><span class="s">CMAKE_C_FLAGS</span>   <span class="s2">&quot;${CMAKE_C_FLAGS} ${warnings}&quot;</span><span class="p">)</span>
</span><a id="CMakeLists.txt-16" class="line-number" href="#CMakeLists.txt-16"></a><span class="hll"><span class="nb">set</span><span class="p">(</span><span class="s">CMAKE_CXX_FLAGS</span> <span class="s2">&quot;${CMAKE_CXX_FLAGS} ${warnings}&quot;</span><span class="p">)</span>
</span><a id="CMakeLists.txt-17" class="line-number" href="#CMakeLists.txt-17"></a><span class="hll">
</span><a id="CMakeLists.txt-18" class="line-number" href="#CMakeLists.txt-18"></a><span class="nb">add_executable</span><span class="p">(</span><span class="s">toDo</span> <span class="s">main.cc</span>
<a id="CMakeLists.txt-19" class="line-number" href="#CMakeLists.txt-19"></a>                    <span class="s">ToDo.cc</span><span class="p">)</span>
<a id="CMakeLists.txt-20" class="line-number" href="#CMakeLists.txt-20"></a>
<a id="CMakeLists.txt-21" class="line-number" href="#CMakeLists.txt-21"></a><span class="nb">add_test</span><span class="p">(</span><span class="s">toDoTest</span> <span class="s">toDo</span><span class="p">)</span>
</pre></div>
</section>  <dl>
    <dt>
      <code>if(<span class="subtle">...</span>)</code>,
      <code>elseif(<span class="subtle">...</span>)</code>,
      <code>else()</code>,
      <code>endif()</code>
    </dt>
    <dd>
      While everything in CMake looks like a function call control flow is
      available. Its <code>if</code> syntax is rather strange so be sure to keep
      the
      <a href="http://www.cmake.org/cmake/help/v2.8.10/cmake.html#command:if">documentation</a>      <time class="access">(2013-01-07)</time> handy. The arguments passed
      to <code>else()</code> and <code>endif()</code> are ignored, but they can
      be useful for documentation purposes.
    </dd>

    <dt class="code">
      CMAKE_<i>&lt;LANG&gt;</i>_COMPILER_ID
    </dt>
    <dd>
      These variables identify the type of compiler being used. Here we are
      using it to be able to pass different flags to different compilers as
      needed. Since Clang accepts the same arguments as GCC I grouped them
      together.  A list of possible values is provided by the
      <a href="http://www.cmake.org/cmake/help/v2.8.10/cmake.html#variable:CMAKE_LANG_COMPILER_ID">documentation</a>      <time class="access">(2013-01-07)</time>.  Obviously my if statement is
      not exhaustive as it only covers the 3 compilers I have readily available.
    </dd>

    <dt class="code">
      set(<span class="arg">variableName</span>
      <span class="arg">value&#8230;</span>)
    </dt>
    <dd>
      Set a variable with the given name to a particular value or list of
      values. <span class="subtle">(Lists will be covered
      <a href="https://www.johnlamp.net/cmake-tutorial-5-functionally-improved-testing.html#section-Lists!">later</a>)</span>    </dd>
    <dd>
      <a href="http://www.cmake.org/cmake/help/v2.8.10/cmake.html#command:set">set() documentation</a>      <time class="access">(2013-03-26)</time>
    </dd>

    <dt class="code">
      CMAKE_<i>&lt;LANG&gt;</i>_FLAGS
    </dt>
    <dd>
      These variables store the flags that will be passed to the compiler for
      all build types. In this particular case we wanted to add some flags that
      control warnings. (Build types will be covered later in this chapter.)
    </dd>
    <dd class="note">
      <em class="call-out">Note:</em> This variable is a string containing all
      of the flags separated by spaces; it is <b>not</b> a list.
    </dd>
    <dd>
      In this case we are turning on most warnings and having the compiler treat
      them as errors. <span class="subtle">(This is, in fact,
      <a href="http://msdn.microsoft.com/en-us/library/thxezb7y.aspx">Microsoft&#8217;s</a>      suggestion for all new projects.)</span> Since we only want to add these
      options we append them to the end of the existing flags string.
    </dd>
    <dd>
      CMake does offer some string functions, but not for something as simple as
      appending to an existing string.
    </dd>
    <dd>
      A few notes about MSVC: The <code>/EHsc</code> flag enables complete C++
      exception handling which is required by <code>iostream</code>.
      (<a href="http://msdn.microsoft.com/en-us/library/vstudio/1deeycx5.aspx"><code>/EH</code> documentation</a>      <time class="access">2013-04-13</time>)
      More importantly is that CMake will convert Unix-style flags to
      Microsoft-style flags automatically for you. So we could have used
      <code>"-W4 -WX -EHsc"</code> instead and it would have worked. This means
      that any common flags do not need to be defined separately for MSVC. I
      would, however, recommend always using Microsoft-style flags for MSVC
      specific flags. Then not only is it obvious that they are MSVC flags, but
      they are also easier to look up since you won&#8217;t have to remember to
      translate them yourself.
    </dd>
  </dl>

  <p>
    Now if we build not only should we see more warnings and since they are
    being treated as errors they should also prevent the build from
    completing. Since warnings usually point to potential problems I always set
    up my <code>CMakeLists.txt</code> to enable stricter warnings and treat them
    as errors. Developing this way can be a bit annoying, but in the long run it
    will lead to cleaner code and, in theory, fewer defects.
  </p>

  <section id="WarningOutput" class="terminal">
    <pre>
 <span class="ansiBold ansiForeground-blue">&gt;</span> mkdir build
 <span class="ansiBold ansiForeground-blue">&gt;</span> cd build
 <span class="ansiBold ansiForeground-blue">&gt;</span> cmake -G &quot;Unix Makefiles&quot; ..
-- The C compiler identification is Clang 4.1.0
-- The CXX compiler identification is Clang 4.1.0
-- Check for working C compiler: /usr/bin/cc
-- Check for working C compiler: /usr/bin/cc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/c++
-- Check for working CXX compiler: /usr/bin/c++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Configuring done
-- Generating done
-- Build files have been written to: /Volumes/Documents/Programming/C++/CMake Tutorial/flavors/mac/part3/build
 <span class="ansiBold ansiForeground-blue">&gt;</span> make
<span class="ansiBold ansiForeground-magenta">Scanning dependencies of target toDo
</span>[ 50%] <span class="ansiForeground-green">Building CXX object CMakeFiles/toDo.dir/main.cc.o
</span><span class="ansiBold">/Volumes/Documents/Programming/C++/CMake Tutorial/flavors/mac/part3/main.cc:22:12: </span><span class="ansiBold ansiForeground-red">error: </span><span class="ansiBold">
      unused parameter 'argc' [-Werror,-Wunused-parameter]</span>
    int    argc,
<span class="ansiBold ansiForeground-green">           ^
</span><span class="ansiBold">/Volumes/Documents/Programming/C++/CMake Tutorial/flavors/mac/part3/main.cc:23:12: </span><span class="ansiBold ansiForeground-red">error: </span><span class="ansiBold">
      unused parameter 'argv' [-Werror,-Wunused-parameter]</span>
    char** argv
<span class="ansiBold ansiForeground-green">           ^
</span><span class="ansiBold">/Volumes/Documents/Programming/C++/CMake Tutorial/flavors/mac/part3/main.cc:58:19: </span><span class="ansiBold ansiForeground-red">error: </span><span class="ansiBold">
      comparison of integers of different signs: 'const unsigned long' and
      'const int' [-Werror,-Wsign-compare]</span>
    if (testValue != expectedValue)
<span class="ansiBold ansiForeground-green">        ~~~~~~~~~ ^  ~~~~~~~~~~~~~
</span><span class="ansiBold">/Volumes/Documents/Programming/C++/CMake Tutorial/flavors/mac/part3/main.cc:34:15: </span><span class="ansiBold ansiForeground-black">note: </span>
      in instantiation of function template specialization
      'equalityTest&lt;unsigned long, int&gt;' requested here
    result |= EXPECT_EQUAL(list.size(), 3);
<span class="ansiBold ansiForeground-green">              ^
</span><span class="ansiBold">/Volumes/Documents/Programming/C++/CMake Tutorial/flavors/mac/part3/main.cc:8:36: </span><span class="ansiBold ansiForeground-black">note: </span>
      expanded from macro 'EXPECT_EQUAL'
#define EXPECT_EQUAL(test, expect) equalityTest( test,  expect, \
<span class="ansiBold ansiForeground-green">                                   ^
</span>3 errors generated.
make[2]: *** [CMakeFiles/toDo.dir/main.cc.o] Error 1
make[1]: *** [CMakeFiles/toDo.dir/all] Error 2
make: *** [all] Error 2
</pre>
  </section>

  <p>
    This time CMake found Clang and with our new flags we have 3 errors.
    <span class="subtle">(Rather nice errors, actually.)</span> These errors are
    actually simple to fix, so lets fix them before we move on.
  </p>

  <section class="code">
<header class="clear-after"><h1>main.cc</h1>
<div class="hll legend">New or modified lines in bold.</div></header><div class="highlight"><pre><a id="main.cc-1" class="line-number" href="#main.cc-1"></a><span class="cp">#include &lt;iostream&gt;</span>
<a id="main.cc-2" class="line-number" href="#main.cc-2"></a>  <span class="k">using</span> <span class="n">std</span><span class="o">::</span><span class="n">cerr</span><span class="p">;</span>
<a id="main.cc-3" class="line-number" href="#main.cc-3"></a>  <span class="k">using</span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="p">;</span>
<a id="main.cc-4" class="line-number" href="#main.cc-4"></a>  <span class="k">using</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
<a id="main.cc-5" class="line-number" href="#main.cc-5"></a>
<a id="main.cc-6" class="line-number" href="#main.cc-6"></a><span class="cp">#include &quot;ToDo.h&quot;</span>
<a id="main.cc-7" class="line-number" href="#main.cc-7"></a>
<a id="main.cc-8" class="line-number" href="#main.cc-8"></a><span class="cp">#define EXPECT_EQUAL(test, expect) equalityTest( test,  expect, \</span>
<a id="main.cc-9" class="line-number" href="#main.cc-9"></a><span class="cp">                                                #test, #expect, \</span>
<a id="main.cc-10" class="line-number" href="#main.cc-10"></a><span class="cp">                                                __FILE__, __LINE__)</span>
<a id="main.cc-11" class="line-number" href="#main.cc-11"></a>
<a id="main.cc-12" class="line-number" href="#main.cc-12"></a><span class="k">template</span> <span class="o">&lt;</span> <span class="k">typename</span> <span class="n">T1</span><span class="p">,</span> <span class="k">typename</span> <span class="n">T2</span> <span class="o">&gt;</span>
<a id="main.cc-13" class="line-number" href="#main.cc-13"></a><span class="kt">int</span> <span class="n">equalityTest</span><span class="p">(</span><span class="k">const</span> <span class="n">T1</span>    <span class="n">testValue</span><span class="p">,</span>
<a id="main.cc-14" class="line-number" href="#main.cc-14"></a>                 <span class="k">const</span> <span class="n">T2</span>    <span class="n">expectedValue</span><span class="p">,</span>
<a id="main.cc-15" class="line-number" href="#main.cc-15"></a>                 <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">testName</span><span class="p">,</span>
<a id="main.cc-16" class="line-number" href="#main.cc-16"></a>                 <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">expectedName</span><span class="p">,</span>
<a id="main.cc-17" class="line-number" href="#main.cc-17"></a>                 <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">fileName</span><span class="p">,</span>
<a id="main.cc-18" class="line-number" href="#main.cc-18"></a>                 <span class="k">const</span> <span class="kt">int</span>   <span class="n">lineNumber</span><span class="p">);</span>
<a id="main.cc-19" class="line-number" href="#main.cc-19"></a>
<a id="main.cc-20" class="line-number" href="#main.cc-20"></a>
<a id="main.cc-21" class="line-number" href="#main.cc-21"></a><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span>
<a id="main.cc-22" class="line-number" href="#main.cc-22"></a><span class="hll">    <span class="kt">int</span><span class="p">,</span>
</span><a id="main.cc-23" class="line-number" href="#main.cc-23"></a><span class="hll">    <span class="kt">char</span><span class="o">**</span>
</span><a id="main.cc-24" class="line-number" href="#main.cc-24"></a><span class="p">)</span>
<a id="main.cc-25" class="line-number" href="#main.cc-25"></a><span class="p">{</span>
<a id="main.cc-26" class="line-number" href="#main.cc-26"></a>    <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<a id="main.cc-27" class="line-number" href="#main.cc-27"></a>
<a id="main.cc-28" class="line-number" href="#main.cc-28"></a>    <span class="n">ToDo</span> <span class="n">list</span><span class="p">;</span>
<a id="main.cc-29" class="line-number" href="#main.cc-29"></a>
<a id="main.cc-30" class="line-number" href="#main.cc-30"></a>    <span class="n">list</span><span class="p">.</span><span class="n">addTask</span><span class="p">(</span><span class="s">&quot;write code&quot;</span><span class="p">);</span>
<a id="main.cc-31" class="line-number" href="#main.cc-31"></a>    <span class="n">list</span><span class="p">.</span><span class="n">addTask</span><span class="p">(</span><span class="s">&quot;compile&quot;</span><span class="p">);</span>
<a id="main.cc-32" class="line-number" href="#main.cc-32"></a>    <span class="n">list</span><span class="p">.</span><span class="n">addTask</span><span class="p">(</span><span class="s">&quot;test&quot;</span><span class="p">);</span>
<a id="main.cc-33" class="line-number" href="#main.cc-33"></a>
<a id="main.cc-34" class="line-number" href="#main.cc-34"></a><span class="hll">    <span class="n">result</span> <span class="o">|=</span> <span class="n">EXPECT_EQUAL</span><span class="p">(</span><span class="n">list</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span>     <span class="kt">size_t</span><span class="p">(</span><span class="mi">3</span><span class="p">));</span>
</span><a id="main.cc-35" class="line-number" href="#main.cc-35"></a>    <span class="n">result</span> <span class="o">|=</span> <span class="n">EXPECT_EQUAL</span><span class="p">(</span><span class="n">list</span><span class="p">.</span><span class="n">getTask</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="s">&quot;write code&quot;</span><span class="p">);</span>
<a id="main.cc-36" class="line-number" href="#main.cc-36"></a>    <span class="n">result</span> <span class="o">|=</span> <span class="n">EXPECT_EQUAL</span><span class="p">(</span><span class="n">list</span><span class="p">.</span><span class="n">getTask</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="s">&quot;compile&quot;</span><span class="p">);</span>
<a id="main.cc-37" class="line-number" href="#main.cc-37"></a>    <span class="n">result</span> <span class="o">|=</span> <span class="n">EXPECT_EQUAL</span><span class="p">(</span><span class="n">list</span><span class="p">.</span><span class="n">getTask</span><span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="s">&quot;test&quot;</span><span class="p">);</span>
<a id="main.cc-38" class="line-number" href="#main.cc-38"></a>
<a id="main.cc-39" class="line-number" href="#main.cc-39"></a>    <span class="k">if</span> <span class="p">(</span><span class="n">result</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
<a id="main.cc-40" class="line-number" href="#main.cc-40"></a>    <span class="p">{</span>
<a id="main.cc-41" class="line-number" href="#main.cc-41"></a>        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Test passed&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<a id="main.cc-42" class="line-number" href="#main.cc-42"></a>    <span class="p">}</span>
<a id="main.cc-43" class="line-number" href="#main.cc-43"></a>
<a id="main.cc-44" class="line-number" href="#main.cc-44"></a>    <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
<a id="main.cc-45" class="line-number" href="#main.cc-45"></a><span class="p">}</span>
<a id="main.cc-46" class="line-number" href="#main.cc-46"></a>
<a id="main.cc-47" class="line-number" href="#main.cc-47"></a>
<a id="main.cc-48" class="line-number" href="#main.cc-48"></a><span class="k">template</span> <span class="o">&lt;</span> <span class="k">typename</span> <span class="n">T1</span><span class="p">,</span> <span class="k">typename</span> <span class="n">T2</span> <span class="o">&gt;</span>
<a id="main.cc-49" class="line-number" href="#main.cc-49"></a><span class="kt">int</span> <span class="n">equalityTest</span><span class="p">(</span>
<a id="main.cc-50" class="line-number" href="#main.cc-50"></a>    <span class="k">const</span> <span class="n">T1</span>    <span class="n">testValue</span><span class="p">,</span>
<a id="main.cc-51" class="line-number" href="#main.cc-51"></a>    <span class="k">const</span> <span class="n">T2</span>    <span class="n">expectedValue</span><span class="p">,</span>
<a id="main.cc-52" class="line-number" href="#main.cc-52"></a>    <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">testName</span><span class="p">,</span>
<a id="main.cc-53" class="line-number" href="#main.cc-53"></a>    <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">expectedName</span><span class="p">,</span>
<a id="main.cc-54" class="line-number" href="#main.cc-54"></a>    <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">fileName</span><span class="p">,</span>
<a id="main.cc-55" class="line-number" href="#main.cc-55"></a>    <span class="k">const</span> <span class="kt">int</span>   <span class="n">lineNumber</span>
<a id="main.cc-56" class="line-number" href="#main.cc-56"></a><span class="p">)</span>
<a id="main.cc-57" class="line-number" href="#main.cc-57"></a><span class="p">{</span>
<a id="main.cc-58" class="line-number" href="#main.cc-58"></a>    <span class="k">if</span> <span class="p">(</span><span class="n">testValue</span> <span class="o">!=</span> <span class="n">expectedValue</span><span class="p">)</span>
<a id="main.cc-59" class="line-number" href="#main.cc-59"></a>    <span class="p">{</span>
<a id="main.cc-60" class="line-number" href="#main.cc-60"></a>        <span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="n">fileName</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;:&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">lineNumber</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;: &quot;</span>
<a id="main.cc-61" class="line-number" href="#main.cc-61"></a>             <span class="o">&lt;&lt;</span> <span class="s">&quot;Expected &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">testName</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; &quot;</span>
<a id="main.cc-62" class="line-number" href="#main.cc-62"></a>             <span class="o">&lt;&lt;</span> <span class="s">&quot;to equal &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">expectedName</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; (&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">expectedValue</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;) &quot;</span>
<a id="main.cc-63" class="line-number" href="#main.cc-63"></a>             <span class="o">&lt;&lt;</span> <span class="s">&quot;but it was (&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">testValue</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;)&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<a id="main.cc-64" class="line-number" href="#main.cc-64"></a>
<a id="main.cc-65" class="line-number" href="#main.cc-65"></a>        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
<a id="main.cc-66" class="line-number" href="#main.cc-66"></a>    <span class="p">}</span>
<a id="main.cc-67" class="line-number" href="#main.cc-67"></a>    <span class="k">else</span>
<a id="main.cc-68" class="line-number" href="#main.cc-68"></a>    <span class="p">{</span>
<a id="main.cc-69" class="line-number" href="#main.cc-69"></a>        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<a id="main.cc-70" class="line-number" href="#main.cc-70"></a>    <span class="p">}</span>
<a id="main.cc-71" class="line-number" href="#main.cc-71"></a><span class="p">}</span>
</pre></div>
</section>  <p>
    <a class="sources" href="https://www.johnlamp.net/sources/chapter3-1.zip"><img src="https://www.johnlamp.net/images/zip.png" alt="[zip file] " />Source</a>  </p>

  <p>
    They were rather simple errors to fix. The simplest solution to unused
    function parameters is to delete their names leaving only the types, if it&#8217;s
    temporary just comment them out. This documents both for other people and
    the compiler that the parameters aren&#8217;t being used. The last error is caused
    by literal numbers defaulting to being <code>int</code>s. If we construct
    a <code>size_t</code> the problem is fixed.
  </p>
</section>

<section>
  <h1 id="section-CmakeGui">CMake GUI</h1>

  <h2 id="section-GeneratingOurProject">Generating Our Project</h2>
  <p>
    The CMake GUI allows one to easily run CMake without having to use the
    command line. It also makes it easier to set or change specific options,
    which we will explore.
  </p>

  <img class="screenshot" src="https://www.johnlamp.net/screenshots/cmt-3/blank.png" alt="[blank CMake window]" />
  <p>
    The first two entries should be familiar, but more explicit than what we saw
    earlier. To relate to the command line we were
    using: <kbd>cd <span class="arg">&lt;Where to build the binaries&gt;</span>;
    cmake <span class="arg">&lt;Where is the source code&gt;</span></kbd>. That
    command line also configures and generates, which you would do using the
    &#8220;Configure&#8221; and &#8220;Generate&#8221; buttons, of course. The bulk of the window is for
    variables, which are only visible once you have configured.
  </p>

  <p>
    It isn&#8217;t quite that simple, though. Once you pick your source and build
    directories and then click &#8220;Configure&#8221; CMake will ask you about which
    generator you want to use and more.
  </p>

  <img class="screenshot" src="https://www.johnlamp.net/screenshots/cmt-3/generator.png" alt="[generator window]" />
  <p>
    The displayed options are the typical ones used so far during this
    tutorial. Generate Unix Makefiles and use the default native compilers. A
    different generator can be chosen from the list rather than having to
    carefully type it, which can be handy. The other options allow you to
    specify which compiler to use, a topic that will be covered later. Clicking
    &#8220;Finish&#8221; will then actually configure.
  </p>
  <p class="note">
    <em class="call-out">Note:</em> This step can only be done the first time,
    so if you want to use a different generator <span class="subtle">(or
    compiler)</span> you will have to start over with an empty build directory.

  </p>

  <img class="screenshot-osX" src="https://www.johnlamp.net/screenshots/cmt-3/firstConfigure.png" alt="[CMake window after configuring]" />
  <p>
    Notice that the bottom section displays the same output
    the <code>cmake</code> command displays when configuring. There are also now
    some variables displayed in the central portion of the window. In this
    example most are specific to Mac OS X. The variables&#8217; values can easily be
    changed by double clicking in the &#8220;Value&#8221; field and entering a new value.
  </p>

  <dl>
    <dt class="code">
      CMAKE_BUILD_TYPE
    </dt>
    <dd>
      This variable controls the type of build to be done. The possible
      values are empty, <code>Debug</code>, <code>Release</code>,
      <code>RelWithDebInfo</code>, and <code>MinSizeRel</code>. The values&#8217;
      meanings are relatively obvious. Based upon the value of this variable
      CMake will set the compiler flags appropriately. This is done by adding
      the value of the
      variable <code>CMAKE_<i>&lt;LANG&gt;</i>_FLAGS_<i>&lt;BUILD_TYPE&gt;</i></code>
      to <code>CMAKE_<i>&lt;LANG&gt;</i>_FLAGS</code>. By setting these
      variables appropriately you can control the compiler flags for the various
      types of builds.
    </dd>
    <dd class="note">
      <em class="call-out">Note:</em> This variable is not available with all
      generators. Some IDE generators create non-Makefile projects, e.g. Visual
      Studio, in which case the build type is handled by the IDE itself.
    </dd>
    <dd>
      <a href="http://www.cmake.org/cmake/help/v2.8.10/cmake.html#variable:CMAKE_BUILD_TYPE">CMAKE_BUILD_TYPE Documentation</a>      <time class="access">2013-01-20</time>
    </dd>

    <dt>
      CMAKE_INSTALL_PREFIX
    </dt>
    <dd>
      CMake can create an install target which will be covered in a future
      chapter. This prefix can be set to control where things are installed. It
      is similar to the <code>--prefix</code> argument
      for <code>configure</code> scripts.
    </dd>
    <dd>
      However if you are curious:
      <a href="http://www.cmake.org/cmake/help/v2.8.10/cmake.html#variable:CMAKE_INSTALL_PREFIX">CMAKE_INSTALL_PREFIX Documentation</a>      <time class="access">2013-01-20</time>
    </dd>
  </dl>

  <p>
    Simply click &#8220;Configure&#8221; again as directed. Clicking &#8220;Generate&#8221; will then
    generate our Makefile so we can build.
  </p>

  <h2 id="section-CmakeCache">CMake Cache</h2>
  <p>
    If you check the &#8220;Advanced&#8221; box all cache variables will be listed.
  </p>

  <img class="screenshot" src="https://www.johnlamp.net/screenshots/cmt-3/advanced.png" alt="[advanced variables]" />
  <p>
    CMake stores variables that need to be persistent in the cache. These
    include things such as the path to your compiler and the flags for the
    compiler. Naturally one should be careful when editing variables in the
    cache.
  </p>
  <p>
    You will notice that the compiler flags we added earlier do not appear in
    the cache. While this might be a good idea as it forces those options to
    always be used it really isn&#8217;t correct. We can tell <code>set()</code> to
    put the variable in the cache, however it&#8217;s not that simple. Either the
    cache will never be updated or our options will be appended <i>every</i>
    time CMake configures.
  </p>
  <p>
    The following should do the trick:
  </p>

  <section class="code cmake">
<header class="clear-after"><h1>CMakeLists.txt</h1>
<div class="hll legend">New or modified lines in bold.</div></header><div class="highlight"><pre><a id="CMakeLists.txt-1-1" class="line-number" href="#CMakeLists.txt-1-1"></a><span class="nb">cmake_minimum_required</span><span class="p">(</span><span class="s">VERSION</span> <span class="s">2.8</span> <span class="s">FATAL_ERROR</span><span class="p">)</span>
<a id="CMakeLists.txt-1-2" class="line-number" href="#CMakeLists.txt-1-2"></a><span class="nb">set</span><span class="p">(</span><span class="s">CMAKE_LEGACY_CYGWIN_WIN32</span> <span class="s">0</span><span class="p">)</span>
<a id="CMakeLists.txt-1-3" class="line-number" href="#CMakeLists.txt-1-3"></a>
<a id="CMakeLists.txt-1-4" class="line-number" href="#CMakeLists.txt-1-4"></a><span class="nb">project</span><span class="p">(</span><span class="s2">&quot;To Do List&quot;</span><span class="p">)</span>
<a id="CMakeLists.txt-1-5" class="line-number" href="#CMakeLists.txt-1-5"></a>
<a id="CMakeLists.txt-1-6" class="line-number" href="#CMakeLists.txt-1-6"></a><span class="nb">enable_testing</span><span class="p">()</span>
<a id="CMakeLists.txt-1-7" class="line-number" href="#CMakeLists.txt-1-7"></a>
<a id="CMakeLists.txt-1-8" class="line-number" href="#CMakeLists.txt-1-8"></a>
<a id="CMakeLists.txt-1-9" class="line-number" href="#CMakeLists.txt-1-9"></a><span class="nb">if</span> <span class="p">(</span><span class="s2">&quot;${CMAKE_CXX_COMPILER_ID}&quot;</span> <span class="s">STREQUAL</span> <span class="s2">&quot;GNU&quot;</span> <span class="s">OR</span>
<a id="CMakeLists.txt-1-10" class="line-number" href="#CMakeLists.txt-1-10"></a>    <span class="s2">&quot;${CMAKE_CXX_COMPILER_ID}&quot;</span> <span class="s">STREQUAL</span> <span class="s2">&quot;Clang&quot;</span><span class="p">)</span>
<a id="CMakeLists.txt-1-11" class="line-number" href="#CMakeLists.txt-1-11"></a>    <span class="nb">set</span><span class="p">(</span><span class="s">warnings</span> <span class="s2">&quot;-Wall -Wextra -Werror&quot;</span><span class="p">)</span>
<a id="CMakeLists.txt-1-12" class="line-number" href="#CMakeLists.txt-1-12"></a><span class="nb">elseif</span> <span class="p">(</span><span class="s2">&quot;${CMAKE_CXX_COMPILER_ID}&quot;</span> <span class="s">STREQUAL</span> <span class="s2">&quot;MSVC&quot;</span><span class="p">)</span>
<a id="CMakeLists.txt-1-13" class="line-number" href="#CMakeLists.txt-1-13"></a>    <span class="nb">set</span><span class="p">(</span><span class="s">warnings</span> <span class="s2">&quot;/W4 /WX /EHsc&quot;</span><span class="p">)</span>
<a id="CMakeLists.txt-1-14" class="line-number" href="#CMakeLists.txt-1-14"></a><span class="nb">endif</span><span class="p">()</span>
<a id="CMakeLists.txt-1-15" class="line-number" href="#CMakeLists.txt-1-15"></a><span class="hll"><span class="nb">if</span> <span class="p">(</span><span class="s">NOT</span> <span class="s">CONFIGURED_ONCE</span><span class="p">)</span>
</span><a id="CMakeLists.txt-1-16" class="line-number" href="#CMakeLists.txt-1-16"></a><span class="hll">    <span class="nb">set</span><span class="p">(</span><span class="s">CMAKE_CXX_FLAGS</span> <span class="s2">&quot;${warnings}&quot;</span>
</span><a id="CMakeLists.txt-1-17" class="line-number" href="#CMakeLists.txt-1-17"></a><span class="hll">        <span class="s">CACHE</span> <span class="s">STRING</span> <span class="s2">&quot;Flags used by the compiler during all build types.&quot;</span> <span class="s">FORCE</span><span class="p">)</span>
</span><a id="CMakeLists.txt-1-18" class="line-number" href="#CMakeLists.txt-1-18"></a><span class="hll">    <span class="nb">set</span><span class="p">(</span><span class="s">CMAKE_C_FLAGS</span>   <span class="s2">&quot;${warnings}&quot;</span>
</span><a id="CMakeLists.txt-1-19" class="line-number" href="#CMakeLists.txt-1-19"></a><span class="hll">        <span class="s">CACHE</span> <span class="s">STRING</span> <span class="s2">&quot;Flags used by the compiler during all build types.&quot;</span> <span class="s">FORCE</span><span class="p">)</span>
</span><a id="CMakeLists.txt-1-20" class="line-number" href="#CMakeLists.txt-1-20"></a><span class="hll"><span class="nb">endif</span><span class="p">()</span>
</span><a id="CMakeLists.txt-1-21" class="line-number" href="#CMakeLists.txt-1-21"></a><span class="hll">
</span><a id="CMakeLists.txt-1-22" class="line-number" href="#CMakeLists.txt-1-22"></a>
<a id="CMakeLists.txt-1-23" class="line-number" href="#CMakeLists.txt-1-23"></a><span class="nb">add_executable</span><span class="p">(</span><span class="s">toDo</span> <span class="s">main.cc</span>
<a id="CMakeLists.txt-1-24" class="line-number" href="#CMakeLists.txt-1-24"></a>                    <span class="s">ToDo.cc</span><span class="p">)</span>
<a id="CMakeLists.txt-1-25" class="line-number" href="#CMakeLists.txt-1-25"></a>
<a id="CMakeLists.txt-1-26" class="line-number" href="#CMakeLists.txt-1-26"></a><span class="nb">add_test</span><span class="p">(</span><span class="s">toDoTest</span> <span class="s">toDo</span><span class="p">)</span>
<a id="CMakeLists.txt-1-27" class="line-number" href="#CMakeLists.txt-1-27"></a><span class="hll">
</span><a id="CMakeLists.txt-1-28" class="line-number" href="#CMakeLists.txt-1-28"></a><span class="hll">
</span><a id="CMakeLists.txt-1-29" class="line-number" href="#CMakeLists.txt-1-29"></a><span class="hll"><span class="nb">set</span><span class="p">(</span><span class="s">CONFIGURED_ONCE</span> <span class="s">TRUE</span> <span class="s">CACHE</span> <span class="s">INTERNAL</span>
</span><a id="CMakeLists.txt-1-30" class="line-number" href="#CMakeLists.txt-1-30"></a><span class="hll">    <span class="s2">&quot;A flag showing that CMake has configured at least once.&quot;</span><span class="p">)</span>
</span></pre></div>
</section>  <p>
    <a class="sources" href="https://www.johnlamp.net/sources/chapter3-2.zip"><img src="https://www.johnlamp.net/images/zip.png" alt="[zip file] " />Source</a>  </p>

  <dl>
    <dt class="code">
      if (NOT CONFIGURED_ONCE)
    </dt>
    <dd>
      In CMake an undefined variable evaluates to false. Because of this we can
      use <code>CONFIGURED_ONCE</code> as a flag to determine if CMake has
      configured this project at least once.  <br /> Defined variables that are
      empty or contain <code>0</code>, <code>N</code>, <code>NO</code>,
      <code>OFF</code>, <code>FALSE</code>, <code>NOTFOUND</code>
      or <code><span class="arg">variable</span>-NOTFOUND</code> are also
      considered false.
    </dd>

    <dt class="code">
      set(CMAKE_CXX_FLAGS &#8220;${warnings}&#8221;
      CACHE STRING &#8220;Flags used by the compiler during all build types.&#8221;
      FORCE)
    </dt>
    <dd>
      Initialize the value of <code>CMAKE_CXX_FLAGS</code> to be the desired
      warning flags. The syntax for this form of the <code>set</code> command is
      explained below. Two things to note:
      <ol>
        <li>
          The docstring is exactly what CMake uses by default. When overriding
          built-in CMake variables be sure to use the same docstring as it does
          to avoid confusion.
        </li>
        <li>
          We need to force this value to be stored in the cache because the
          built-in variables are present in the cache even before the first time
          our project is configured. This is why we need the
          <code>CONFIGURED_ONCE</code> variable.
        </li>
      </ol>
    </dd>

    <dt class="code">
      set(CONFIGURED_ONCE TRUE CACHE INTERNAL
      &#8220;A flag showing that CMake has configured at least once.&#8221;)
    </dt>
    <dd>
      Set <code>CONFIGURED_ONCE</code> to true and store it in the cache since
      by now configuration is complete. We don&#8217;t need to force this
      as <code>CONFIGURED_ONCE</code> is not present in the cache.
    </dd>
  </dl>

  <p>
    A new form of the <code>set</code> command was used this time to store
    variables in the CMake project&#8217;s cache. It is explained here and also in
    CMake&#8217;s
    <a href="http://www.cmake.org/cmake/help/v2.8.10/cmake.html#command:set">documentation</a>    <time class="access">(2013-01-29)</time>
  </p>

  <dl>
    <dt class="code">
      set(<span class="arg">variableName</span>
      <span class="arg">value &#8230;</span>
      CACHE <span class="arg">type</span> <span class="arg">docstring</span>
      <span class="optional">FORCE</span>)
    </dt>
    <dd>
      This form of the <code>set</code> function allows you to store a variable
      in CMake&#8217;s cache. The cache is both global and persistent. For both of
      these reasons it can be quite useful and should be used carefully. The
      other important thing about the cache is that users can, for the most
      part, edit it.

      The <code>CACHE</code> flag is a literal that tells CMake you want to
      store this variable in the cache.

      <dl>
        <dt class="code arg">type</dt>
        <dd>
          The type of value being stored in the cache. Possible values:
          <dl>
            <dt class="code">FILEPATH</dt>
            <dd>
              A path to a file. In the CMake GUI a file chooser dialog may
              be used.
            </dd>

            <dt class="code">PATH</dt>
            <dd>
              A path to a directory. In the CMake GUI a directory chooser
              dialog may be used.
            </dd>

            <dt class="code">STRING</dt>
            <dd>
              An arbitrary string.
            </dd>

            <dt class="code">BOOL</dt>
            <dd>
              A boolean on/off value. In the CMake GUI a checkbox will be
              used.
            </dd>

            <dt class="code">INTERNAL</dt>
            <dd>
              A value of any type with no GUI entry. This is useful for
              persistent, global variables.
            </dd>
          </dl>
        </dd>

        <dt class="code arg">docstring</dt>
        <dd>
          A string that describes the purpose of the variable. If only specific
          values are allowed list them here as the user will see this string in
          the CMake GUI as a tool tip.
        </dd>

        <dt>
          <span class="code">FORCE</span>
          <span class="subtle">(optional)</span>
        </dt>
        <dd>
          Force this entry to be set in the cache. Normally if a variable
          already exists in the cache future attempts to set it will be ignored
          unless <code>FORCE</code> is the last argument. Please note that
          setting a variable in the cache is dependent on the variable already
          being in the cache not on its emptiness. Because of this and the fact
          that many of the CMake variables exist in the cache before
          your <code>CMakeLists.txt</code> is processed you need to test for the
          first configuration as done above.
        </dd>
      </dl>
    </dd>
  </dl>
</section>

<section>
  <h1 id="section-CmakeCursesInterface">CMake Curses Interface</h1>

  <h2 id="section-IntroducingCcmake">Introducing <code>ccmake</code></h2>
  <p>
    CMake also includes a command line curses-based
    interface, <code>ccmake</code>. It provides equivalent functionality to that
    of the GUI. Most installations include this tool, although not
    all. The <code>ccmake</code> tool can be used both to create a CMake build
    or edit the cache of one. To create a new build it is used very similarly
    to <code>cmake</code>:
    <br />
    <kbd>ccmake <span class="arg">path-to-source</span></kbd>
    <br />
    Naturally editing a build&#8217;s cache is quite similar:
    <br />
    <kbd>ccmake <span class="arg">path-to-existing-build</span></kbd>
    <br />
    For the most part this tool is very much like the GUI except, of course, its
    interactions are all keyboard based. It can be useful if you often connect
    to your build machine via an ssh session or you don&#8217;t want the dependency of
    Qt, which the GUI requires.
  </p>

  <img class="screenshot" src="https://www.johnlamp.net/screenshots/cmt-3/ccmake.png" alt="[ccmake curses interface]" />
  <p>
    The main difference between this tool and the GUI is that it won&#8217;t walk you
    through setting up a build, you have to provide paths on the command
    line. Besides that its features are mostly the same. Of course, instead of
    clicking the &#8220;Configure&#8221; and &#8220;Generate&#8221; buttons you would use
    the <kbd class="key">c</kbd> and <kbd class="key">g</kbd> keys.
  </p>

  <h2 id="section-UsefulMakefileTargets">Useful Makefile Targets</h2>
  <p>
    There are two built-in make targets that CMake provides that are useful for
    managing the cache. These are especially useful if you work from the command
    line a lot.
  </p>
  <dl>
    <dt>
      <kbd>make rebuild_cache</kbd>
    </dt>
    <dd>
      This target re-runs CMake for your build having the same effect
      as <kbd>cmake .</kbd>, this can be handy, though, if you have multiple
      versions of CMake installed or don&#8217;t have <code>cmake</code> in your path
      as this target knows the path to the <code>cmake</code> that was
      originally used to generate the build.
    </dd>

    <dt>
      <kbd>make edit_cache</kbd>
    </dt>
    <dd>
      Very similar to the above target except this one runs the
      appropriate <code>ccmake</code>, or <code>cmake-gui</code>
      if <code>ccmake</code> isn&#8217;t installed. The reasons for this being useful
      are the same, too.
    </dd>
  </dl>
  <p>
    Most of the time these targets aren&#8217;t used, but as they can be handy it&#8217;s
    good to know about them.
  </p>

  <p>
    There is one last Makefile target that is useful, especially on larger
    projects: <kbd>make help</kbd>. This prints a list of targets provided by
    the Makefile. This can be convenient if you only want to build specific
    targets but aren&#8217;t sure how they were named.
  </p>
</section>

<section id="revision-history"><span class="heading">Revision History</span><table summary="Revision History"><thead><tr><td>Version</td><td>Date</td><td>Comment</td></tr></thead><tbody><tr><td>1</td><td>2013-03-28</td><td>Original version.</td></tr><tr><td>2</td><td>2013-04-14</td><td>Updated MSVC compiler flags and added note about automatic flag-style conversion.</td></tr><tr><td>3</td><td>2013-07-14</td><td>Added line numbers and indication of changes to code sample. Added a link to the section on lists.</td></tr></tbody></table></section>

  </div>

  <footer class="entry-meta">
    This entry was tagged <a href="https://www.johnlamp.net/tag/cmake" rel="tag">CMake</a>, <a href="https://www.johnlamp.net/tag/long" rel="tag">long</a>, <a href="https://www.johnlamp.net/tag/tutorial" rel="tag">tutorial</a>. Bookmark the <a href="https://www.johnlamp.net/cmake-tutorial-3-gui-tool.html" title="Permalink to CMake Tutorial &#8211; Chapter&nbsp;3: GUI Tool" rel="bookmark">permalink</a>.     </footer>
     <footer class="entry-license"><div class="license"><a class="no-decoration" rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.en_US"><img alt="Creative Commons License" style="border-width: 0;" width="80" height="15" src="https://www.johnlamp.net/wp-content/themes/tutorial-theme/ccImages/by-nc-sa-r.png" /></a>This entry, "<span xmlns:dct="http://purl.org/dc/terms/" property="dct:title">CMake Tutorial &#8211; Chapter&nbsp;3: GUI Tool</span>," by <span xmlns:cc="http://creativecommons.org/ns#" property="cc:attributionName">John Lamp</span> is licensed under a <a rel="license" href="http://creativecommons.org/licensesby-nc-sa/by-nc-sa/3.0/deed.en_US">Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License</a>.</div><div class="code-license"><span xmlns:dct="http://purl.org/dc/terms/"><a class="no-decoration" rel="license" href="http://creativecommons.org/publicdomain/zero/1.0/"><img src="https://www.johnlamp.net/wp-content/themes/tutorial-theme/ccImages/cc-zero-r.png" width="80" height="15" style="border-style: none;" alt="CC0" /></a>To the extent possible under law, <span xmlns:cc="http://creativecommons.org/ns#" property="cc:attributionName">John Lamp</span> has waived all copyright and related or neighboring rights to the code samples in this entry, "<span xmlns:dct="http://purl.org/dc/terms/" property="dct:title">CMake Tutorial &#8211; Chapter&nbsp;3: GUI Tool</span>".</span></div></footer></article>
<nav role="navigation" id="nav-below" class="site-navigation post-navigation"><h1 class="assistive-text">Post navigation</h1><div class="nav-previous"><a href="https://www.johnlamp.net/cmake-tutorial-2-ide-integration.html" rel="prev"><span class="meta-nav">&larr;</span> CMake Tutorial &#8211; Chapter&nbsp;2: IDE Integration</a></div><div class="nav-next"><a href="https://www.johnlamp.net/cmake-tutorial-4-libraries-and-subdirectories.html" rel="next">CMake Tutorial &#8211; Chapter&nbsp;4: Libraries and Subdirectories <span class="meta-nav">&rarr;</span></a></div></nav>
<div id="comments" class="comments-area">
          <h2 class="comments-title">
          4 thoughts on &ldquo;<span>CMake Tutorial &#8211; Chapter&nbsp;3: GUI Tool</span>&rdquo;        </h2>

        
        <ol class="commentlist">
          <li id="li-comment-843" class="comment even thread-even depth-1"><article id="comment-843" class="comment"><footer><div class="comment-meta commentmetadata"><a href="https://www.johnlamp.net/cmake-tutorial-3-gui-tool.html#comment-843"><time pubdate date-time="2014-10-05T01:34:22+00:00">2014-10-05 at 01:34:22</time></a></div><div class="comment-author vcard"><img alt='' src='https://secure.gravatar.com/avatar/f75b29d95f32bdf306f76cda1631922d?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/f75b29d95f32bdf306f76cda1631922d?s=80&amp;d=mm&amp;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /><cite class="fn">Vu. Le Thanh</cite> <span class="says">said:</span></div></footer><div class="comment-content"><p>Sorry for my bad English.</p>
<p>Can you explain more about &#8220;CMake Cache&#8221; section, I don&#8217;t really understand:<br />
&#8211; Why &#8220;the compiler flags we added earlier do not appear in the cache&#8221; ?<br />
&#8211; We tell CMake add them to the cache what for ?</p>
</div><div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://www.johnlamp.net/cmake-tutorial-3-gui-tool.html?replytocom=843#respond' onclick='return addComment.moveForm( "comment-843", "843", "respond", "18" )' aria-label='Reply to Vu. Le Thanh'>Reply</a></div></article><ul class="children">
<li id="li-comment-872" class="comment byuser comment-author-john bypostauthor odd alt depth-2"><article id="comment-872" class="comment"><footer><div class="comment-meta commentmetadata"><a href="https://www.johnlamp.net/cmake-tutorial-3-gui-tool.html#comment-872"><time pubdate date-time="2014-10-20T20:30:25+00:00">2014-10-20 at 20:30:25</time></a></div><div class="comment-author vcard"><img alt='' src='https://secure.gravatar.com/avatar/a148d7f6a3a99fbaf09dfb9a317e4380?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/a148d7f6a3a99fbaf09dfb9a317e4380?s=80&amp;d=mm&amp;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /><cite class="fn"><a href='http://JohnLamp.net' rel='external nofollow' class='url'>John Lamp</a></cite> <span class="says">said:</span></div></footer><div class="comment-content"><p>The CMake cache does two things:<br />
1. It stores some variables persistently between individual runs of CMake.<br />
2. You can edit most variables in the cache using the CMake GUI or the curses interface <code>ccmake</code>.</p>
<p>In many ways 2 is the most important. Using the GUI one can explore what parameters are available for the build, this can make certain options &ldquo;discoverable&rdquo;. For example you can use the GUI to change the build type (<code>CMAKE_BUILD_TYPE</code>) even if you don&#8217;t remember the exact name of the option or the available values since a list of variables in the cache is displayed and its help string lists the valid values. The one I find most useful is being able to quickly change the compiler flags, this is especially helpful if ever you need to write a preprocessor macro. If using Clang or GCC you can easily add, and later remove, the <code>-save-temps</code> flag using the CMake GUI.</p>
<p>The storage of variables provided by the cache is useful for a variety of things. As mentioned above persisting the chosen build type and compiler flags. Also things that are expensive to calculate can be saved so that they don&#8217;t have to be calculated every time CMake is run. This last part is very useful when using the <code>find_package</code> command.</p>
<p>To, finally, answer your questions:<br />
&#8211; When we used <code>set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${warnings}")</code> we didn&#8217;t specify that the new value for the variable <code>CMAKE_CXX_FLAGS</code> should be stored in the cache so the cache was not updated. Based on the way storing variables in the cache works I would guess that  CMake only intends for the cache to be set programmatically the firs time it is run and then only updated by the user after that. I am assuming this because you have to use the <code>FORCE</code> option to modify a variable that is already in the cache.<br />
&#8211; Updating the compiler flags in the cache is done for two reasons. First this way you can easily see what the compiler flags are by looking at the cache rather than by inspecting the actual compile command (although doing so is not a bad idea). The second is that it allows you to edit the flags using the CMake GUI. If we had not updated the cache we would be simply adding the flags on every time CMake is run and the only way you could remove one of those flags would be by editing the <code>CMakeLists.txt</code> file. As to which way is better probably depends upon the situation.</p>
</div><div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://www.johnlamp.net/cmake-tutorial-3-gui-tool.html?replytocom=872#respond' onclick='return addComment.moveForm( "comment-872", "872", "respond", "18" )' aria-label='Reply to John Lamp'>Reply</a></div></article></li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
<li id="li-comment-1057" class="comment even thread-odd thread-alt depth-1"><article id="comment-1057" class="comment"><footer><div class="comment-meta commentmetadata"><a href="https://www.johnlamp.net/cmake-tutorial-3-gui-tool.html#comment-1057"><time pubdate date-time="2015-04-28T04:40:35+00:00">2015-04-28 at 04:40:35</time></a></div><div class="comment-author vcard"><img alt='' src='https://secure.gravatar.com/avatar/00c57dcdb0563c75eb8166b936d87851?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/00c57dcdb0563c75eb8166b936d87851?s=80&amp;d=mm&amp;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /><cite class="fn">Guowei HE</cite> <span class="says">said:</span></div></footer><div class="comment-content"><p>Dear John,</p>
<p>Seems to me that some of the pictures are no longer valid. Could you kindly check them? Thanks!</p>
<p>For example:<br />
<i><br />
For the most part this tool is very much like the GUI except, of course, its interactions are all keyboard based. It can be useful if you often connect to your build machine via an ssh session or you don’t want the dependency of Qt, which the GUI requires.</p>
<p>[ccmake curses interface]<br />
The main difference between this tool and the GUI is that it won’t walk you through setting up a build, you have to provide paths on the command line. Besides that its features are mostly the same. Of course, instead of clicking the “Configure” and “Generate” buttons you would use the c and g keys<br />
</i></p>
</div><div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://www.johnlamp.net/cmake-tutorial-3-gui-tool.html?replytocom=1057#respond' onclick='return addComment.moveForm( "comment-1057", "1057", "respond", "18" )' aria-label='Reply to Guowei HE'>Reply</a></div></article><ul class="children">
<li id="li-comment-1062" class="comment byuser comment-author-john bypostauthor odd alt depth-2"><article id="comment-1062" class="comment"><footer><div class="comment-meta commentmetadata"><a href="https://www.johnlamp.net/cmake-tutorial-3-gui-tool.html#comment-1062"><time pubdate date-time="2015-05-02T18:51:58+00:00">2015-05-02 at 18:51:58</time></a></div><div class="comment-author vcard"><img alt='' src='https://secure.gravatar.com/avatar/a148d7f6a3a99fbaf09dfb9a317e4380?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/a148d7f6a3a99fbaf09dfb9a317e4380?s=80&amp;d=mm&amp;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /><cite class="fn"><a href='http://JohnLamp.net' rel='external nofollow' class='url'>John Lamp</a></cite> <span class="says">said:</span></div></footer><div class="comment-content"><p>Thank you for informing me of this mistake. It has been fixed, so you should see the image now. (If not then something is still wrong.)</p>
</div><div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://www.johnlamp.net/cmake-tutorial-3-gui-tool.html?replytocom=1062#respond' onclick='return addComment.moveForm( "comment-1062", "1062", "respond", "18" )' aria-label='Reply to John Lamp'>Reply</a></div></article></li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
        </ol>

        						<div id="respond" class="comment-respond">
				<h3 id="reply-title" class="comment-reply-title">Leave a Reply <small><a rel="nofollow" id="cancel-comment-reply-link" href="/cmake-tutorial-3-gui-tool.html#respond" style="display:none;">Cancel reply</a></small></h3>
									<form action="https://www.johnlamp.net/wp-comments-post.php" method="post" id="commentform" class="comment-form">
																			<p class="comment-notes"><span id="email-notes">Your email address will not be published.</span> Required fields are marked <span class="required">*</span></p>							<p class="comment-form-author"><label for="author">Name <span class="required">*</span></label> <input id="author" name="author" type="text" value="" size="30" aria-required='true' required='required' /></p>
<p class="comment-form-email"><label for="email">Email <span class="required">*</span></label> <input id="email" name="email" type="text" value="" size="30" aria-describedby="email-notes" aria-required='true' required='required' /></p>
<p class="comment-form-url"><label for="url">Website</label> <input id="url" name="url" type="text" value="" size="30" /></p>
												<p class="comment-form-comment"><label for="comment">Comment</label> <textarea id="comment" name="e5932-comment" cols="45" rows="8"  aria-required="true" required="required"></textarea><textarea name="comment" style="display:none" rows="1" cols="1"></textarea></p>						
						<p class="form-submit"><input name="submit" type="submit" id="submit" class="submit" value="Post Comment" /> <input type='hidden' name='comment_post_ID' value='18' id='comment_post_ID' />
<input type='hidden' name='comment_parent' id='comment_parent' value='0' />
</p>					</form>
							</div><!-- #respond -->
			</div>

  </div>
</div>


<div id="secondary" class="widget-area" role="complementary">
  <aside id="archives-2" class="widget widget_archive"><h1 class="widget-title">Archives</h1>		<ul>
	<li><a href='https://www.johnlamp.net/2015/03'>March 2015</a></li>
	<li><a href='https://www.johnlamp.net/2013/07'>July 2013</a></li>
	<li><a href='https://www.johnlamp.net/2013/05'>May 2013</a></li>
	<li><a href='https://www.johnlamp.net/2013/03'>March 2013</a></li>
		</ul>
</aside><aside id="categories-2" class="widget widget_categories"><h1 class="widget-title">Categories</h1>		<ul>
	<li class="cat-item cat-item-4"><a href="https://www.johnlamp.net/category/cmake-tutorial" >CMake Tutorial</a>
</li>
		</ul>
</aside></div>

<div id="tertiary" class="widget-area" role="supplementary">
  <aside id="meta-2" class="widget widget_meta"><h1 class="widget-title">Meta</h1>			<ul>
						<li><a rel="nofollow" href="https://www.johnlamp.net/wp-login.php">Log in</a></li>
			<li><a href="https://www.johnlamp.net/feed">Entries <abbr title="Really Simple Syndication">RSS</abbr></a></li>
			<li><a href="https://www.johnlamp.net/comments/feed">Comments <abbr title="Really Simple Syndication">RSS</abbr></a></li>
<li><a href="https://wordpress.org/" title="Powered by WordPress, state-of-the-art semantic personal publishing platform.">WordPress.org</a></li>			</ul>
</aside></div>

      </div> <!-- #main .site-main -->

      <footer id="colophon" class="site-footer" role="contentinfo">
        <div class="copyright">
          Site Copyrighted &copy; 2013-2014 John Lamp all rights reserved.        </div>

        <div class="site-info">
          <a class="no-decoration" href="http://wordpress.org/" title="A Semantic Personal Publishing Platform" rel="generator"><img id="codeIsPoetry" src="https://www.johnlamp.net/wp-content/themes/tutorial-theme/images/codeIsPoetry.png" alt="Code is Poetry" /></a>        </div>

        <nav class="footer-navigation">
                    </nav>

        <div class="cleared"></div>
      </footer>
    </div> <!-- #page .hfeed .site -->

    <script type='text/javascript' src='https://www.johnlamp.net/wp-includes/js/comment-reply.min.js?ver=4.3.1'></script>
<script type='text/javascript' src='https://www.johnlamp.net/wp-content/themes/tutorial-theme/js/navigation.js?ver=20120206'></script>

  </body>
</html>
