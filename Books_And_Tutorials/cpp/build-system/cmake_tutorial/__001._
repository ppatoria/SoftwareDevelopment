<!DOCTYPE html>
<!--[if IE 8]>
<html id="ie8" lang="en-US" prefix="og: http://ogp.me/ns#"><![endif]-->
<!--[if !(IE 8) ]><!-->
<html lang="en-US" prefix="og: http://ogp.me/ns#">
<!--<![endif]-->
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width" />
  <title>CMake Tutorial - Chapter&nbsp;2: IDE Integration - JohnLamp.netJohnLamp.net</title>
  <link rel="profile" href="http://gmpg.org/xfn/11" />
  <link rel="pingback" href="https://www.johnlamp.net/xmlrpc.php" />
  <!--[if lt IE 9]>
  <script src="https://www.johnlamp.net/wp-content/themes/tutorial-theme/js/html5.js" type="text/javascript"></script>
  <![endif]-->
  
<!-- This site is optimized with the Yoast SEO plugin v3.0.4 - https://yoast.com/wordpress/plugins/seo/ -->
<link rel="canonical" href="https://www.johnlamp.net/cmake-tutorial-2-ide-integration.html" />
<meta property="og:locale" content="en_US" />
<meta property="og:type" content="article" />
<meta property="og:title" content="CMake Tutorial - Chapter&nbsp;2: IDE Integration - JohnLamp.net" />
<meta property="og:description" content="Now that we are familiar with CMake I will make good on CMake&#039;s promise of
    flexibility. I said before that CMake could create projects for various
    IDE&#039;s and in this chapter we will do so. This is one of CMake&#039;s greatest
    strengths as it allows for very diverse development environments while
    working on the same &hellip;Continue reading &quot;CMake Tutorial &#8211; Chapter&nbsp;2: IDE Integration&quot;" />
<meta property="og:url" content="https://www.johnlamp.net/cmake-tutorial-2-ide-integration.html" />
<meta property="og:site_name" content="JohnLamp.net" />
<meta property="article:tag" content="CMake" />
<meta property="article:tag" content="long" />
<meta property="article:tag" content="tutorial" />
<meta property="article:section" content="CMake Tutorial" />
<meta property="article:published_time" content="2013-03-28T19:31:48+00:00" />
<meta property="article:modified_time" content="2014-12-28T10:53:00+00:00" />
<meta property="og:updated_time" content="2014-12-28T10:53:00+00:00" />
<meta property="og:image" content="https://www.johnlamp.net/images/zip.png" />
<meta property="og:image" content="https://www.johnlamp.net/screenshots/cmt-2/visualStudio/files.png" />
<meta property="og:image" content="https://www.johnlamp.net/screenshots/cmt-2/visualStudio/project.png" />
<meta property="og:image" content="https://www.johnlamp.net/screenshots/cmt-2/visualStudio/build.png" />
<meta property="og:image" content="https://www.johnlamp.net/screenshots/cmt-2/visualStudio/build2.png" />
<meta property="og:image" content="https://www.johnlamp.net/screenshots/cmt-2/xcode/files.png" />
<meta property="og:image" content="https://www.johnlamp.net/screenshots/cmt-2/xcode/project.png" />
<meta property="og:image" content="https://www.johnlamp.net/screenshots/cmt-2/xcode/targets.png" />
<meta property="og:image" content="https://www.johnlamp.net/screenshots/cmt-2/xcode/build.png" />
<meta property="og:image" content="https://www.johnlamp.net/screenshots/cmt-2/eclipse/project.png" />
<meta property="og:image" content="https://www.johnlamp.net/screenshots/cmt-2/eclipse/project2.png" />
<meta property="og:image" content="https://www.johnlamp.net/screenshots/cmt-2/eclipse/build.png" />
<meta property="og:image" content="https://www.johnlamp.net/screenshots/cmt-2/eclipse/targets.png" />
<meta property="og:image" content="https://www.johnlamp.net/screenshots/cmt-2/eclipse/test.png" />
<meta property="og:image" content="https://www.johnlamp.net/screenshots/cmt-2/kdevelop3/files.png" />
<meta property="og:image" content="https://www.johnlamp.net/screenshots/cmt-2/kdevelop3/project.png" />
<meta property="og:image" content="https://www.johnlamp.net/screenshots/cmt-2/kdevelop3/build.png" />
<meta property="og:image" content="https://www.johnlamp.net/screenshots/cmt-2/kdevelop3/targets.png" />
<meta property="og:image" content="https://www.johnlamp.net/screenshots/cmt-2/kdevelop3/test.png" />
<meta property="og:image" content="https://www.johnlamp.net/screenshots/cmt-2/kdevelop4/project.png" />
<meta property="og:image" content="https://www.johnlamp.net/screenshots/cmt-2/kdevelop4/build.png" />
<meta property="og:image" content="https://www.johnlamp.net/screenshots/cmt-2/kdevelop4/files.png" />
<meta property="og:image" content="https://www.johnlamp.net/screenshots/cmt-2/kdevelop4/run.png" />
<!-- / Yoast SEO plugin. -->

<link rel="alternate" type="application/rss+xml" title="JohnLamp.net &raquo; Feed" href="https://www.johnlamp.net/feed" />
<link rel="alternate" type="application/rss+xml" title="JohnLamp.net &raquo; Comments Feed" href="https://www.johnlamp.net/comments/feed" />
<link rel="alternate" type="application/rss+xml" title="JohnLamp.net &raquo; CMake Tutorial &#8211; Chapter&nbsp;2: IDE Integration Comments Feed" href="https://www.johnlamp.net/cmake-tutorial-2-ide-integration.html/feed" />
		<script type="text/javascript">
			window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/72x72\/","ext":".png","source":{"concatemoji":"https:\/\/www.johnlamp.net\/wp-includes\/js\/wp-emoji-release.min.js?ver=4.3.1"}};
			!function(a,b,c){function d(a){var c=b.createElement("canvas"),d=c.getContext&&c.getContext("2d");return d&&d.fillText?(d.textBaseline="top",d.font="600 32px Arial","flag"===a?(d.fillText(String.fromCharCode(55356,56812,55356,56807),0,0),c.toDataURL().length>3e3):(d.fillText(String.fromCharCode(55357,56835),0,0),0!==d.getImageData(16,16,1,1).data[0])):!1}function e(a){var c=b.createElement("script");c.src=a,c.type="text/javascript",b.getElementsByTagName("head")[0].appendChild(c)}var f,g;c.supports={simple:d("simple"),flag:d("flag")},c.DOMReady=!1,c.readyCallback=function(){c.DOMReady=!0},c.supports.simple&&c.supports.flag||(g=function(){c.readyCallback()},b.addEventListener?(b.addEventListener("DOMContentLoaded",g,!1),a.addEventListener("load",g,!1)):(a.attachEvent("onload",g),b.attachEvent("onreadystatechange",function(){"complete"===b.readyState&&c.readyCallback()})),f=c.source||{},f.concatemoji?e(f.concatemoji):f.wpemoji&&f.twemoji&&(e(f.twemoji),e(f.wpemoji)))}(window,document,window._wpemojiSettings);
		</script>
		<style type="text/css">
img.wp-smiley,
img.emoji {
	display: inline !important;
	border: none !important;
	box-shadow: none !important;
	height: 1em !important;
	width: 1em !important;
	margin: 0 .07em !important;
	vertical-align: -0.1em !important;
	background: none !important;
	padding: 0 !important;
}
</style>
<link rel='stylesheet' id='style-css'  href='https://www.johnlamp.net/wp-content/themes/tutorial-theme/style.css?ver=4.3.1' type='text/css' media='all' />
<script type='text/javascript' src='https://www.johnlamp.net/wp-includes/js/jquery/jquery.js?ver=1.11.3'></script>
<script type='text/javascript' src='https://www.johnlamp.net/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1'></script>
<link rel='shortlink' href='https://www.johnlamp.net/?p=16' />
<style type="text/css">.site-title a,.site-description{color: #f57900 !important;\n}</style></head>
<body class="single single-post postid-16 single-format-standard">
<div id="page" class="hfeed site">
  <header id="masthead" class="site-header" role="banner">
    <a href="https://www.johnlamp.net/" title="JohnLamp.net" rel="home"><img src="https://www.johnlamp.net/wp-content/uploads/2014/09/JL-Symbol.png" width="87" height="90" style="width: 87px; height: 90px;" alt="" /></a>    <div class="hgroup">
      <h1 class="site-title">
        <a href="https://www.johnlamp.net/" title="JohnLamp.net" rel="home">JohnLamp.net</a>
      </h1>
      <h2 class="site-description">
              </h2>
    </div>

    <div id="search">
      <form method="get" id="searchform" action="https://www.johnlamp.net/" role="search"><label for="searchInput" class="assistive-text">Search</label><input type="text" class="field" name="searchInput" value="" id="searchInput" placeholder="Search &hellip;" /><input type="submit" id="searchsubmit" class="submit" value="Search" /></form>    </div>

    <nav id="site-navigation" role="navigation" class="main-navigation">
      <h1 class="assistive-text">
        Menu      </h1>
      <div class="assistive-text skip-link">
        <a href="#content" title="Skip to content">Skip to content</a>
      </div>
      <div class="menu-main-menu-container"><ul id="menu-main-menu" class="menu"><li id="menu-item-4" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-4"><a href="https://www.johnlamp.net/">Home</a></li>
<li id="menu-item-10" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-10"><a href="https://www.johnlamp.net/cmake-tutorial.html">CMake Tutorial</a></li>
</ul></div>    </nav>
    <div class="cleared"></div>
  </header>
  <div id="main" class="site-main">

<div id="primary" class="content-area">
  <div id="content" class="site-content" role="main">

    <nav role="navigation" id="nav-above" class="site-navigation post-navigation"><h1 class="assistive-text">Post navigation</h1><div class="nav-previous"><a href="https://www.johnlamp.net/cmake-tutorial-1-getting-started.html" rel="prev"><span class="meta-nav">&larr;</span> CMake Tutorial &#8211; Chapter&nbsp;1: Getting Started</a></div><div class="nav-next"><a href="https://www.johnlamp.net/cmake-tutorial-3-gui-tool.html" rel="next">CMake Tutorial &#8211; Chapter&nbsp;3: GUI Tool <span class="meta-nav">&rarr;</span></a></div></nav>

<article id="post-16" class="post-16 post type-post status-publish format-standard hentry category-cmake-tutorial tag-cmake tag-long tag-tutorial">
  <header class="entry-header">
    <h1 class="entry-title">
      CMake Tutorial &#8211; Chapter&nbsp;2: IDE Integration    </h1>

    <div class="entry-meta">
      Posted on <a href="https://www.johnlamp.net/cmake-tutorial-2-ide-integration.html" title="19:31:48" rel="bookmark"><time class="entry-date" datetime="2013-03-28T19:31:48+00:00">2013-03-28</time></a> <span class="byline">by <span class="author vcard"><a class="url fn n" href="https://www.johnlamp.net/author/john" title="View all posts by John Lamp" rel="author">John Lamp</a></span></span>    </div>
  </header>

  <div class="entry-content">
    <nav class="contents"><h1>Contents</h1><ol><li><a href="#section-Introduction">Introduction</a></li><li><a href="#section-VisualStudio">Visual Studio</a></li><li><a href="#section-Xcode">Xcode</a></li><li><ol><li><a href="#section-MacOsX">Mac OS X</a></li><li><a href="#section-Ios">iOS</a></li></ol></li><li><a href="#section-EclipseCdt4">Eclipse CDT4</a></li><li><a href="#section-Kdevelop">KDevelop</a></li><li><ol><li><a href="#section-Generated(Kdevelop3)">Generated (KDevelop3)</a></li><li><a href="#section-CmakeSupport(Kdevelop4)">CMake Support (KDevelop4)</a></li></ol></li></ol></nav>
<section>
  <h1 id="section-Introduction">Introduction</h1>
  <p>
    Now that we are familiar with CMake I will make good on CMake&#8217;s promise of
    flexibility. I said before that CMake could create projects for various
    IDE&#8217;s and in this chapter we will do so. This is one of CMake&#8217;s greatest
    strengths as it allows for very diverse development environments while
    working on the same project. It also makes it possible for you to take
    advantage of all available tools. If, for example, you prefer to work in
    Emacs or Vim and build with Make you could still create an IDE project and
    take advantage of its refactoring tools.
  </p>
  <p>
    By now some of you have looked at the scroll bar and noticed that this
    chapter is rather long. Don&#8217;t worry I don&#8217;t expect you to read all of it and
    there are a lot of pictures. I present several IDEs but assume that you will
    only read the ones that are useful to you.
  </p>
  <p>
    Please remember that CMake has more generators than those presented here. To
    list all of the available generators for your install use the
    command <kbd>cmake --help</kbd>. Most available generators are listed in the
    CMake
    <a href="http://www.cmake.org/cmake/help/v2.8.8/cmake.html#section_Generators">documentation</a>    <time class="access">(2012-07-08)</time>.
  </p>
  <p>
    We will use the same code as we had at the end of the
    <a href="https://www.johnlamp.net/cmake-tutorial-1-getting-started.html#section-SimpleImprovements">first chapter</a>.    It can be downloaded again here:
    <a class="sources" href="https://www.johnlamp.net/sources/chapter1-2.zip"><img src="https://www.johnlamp.net/images/zip.png" alt="[zip file] " />Source</a>  </p>
</section>

<section>
  <h1 id="section-VisualStudio">Visual Studio</h1>
  <p class="subtle">
    Visual Studio 2010 Express Version 10.0.30319.1 RTMTel was used.
    <br />
    Visual Studio 2010 Professional Version 10.0.30319.1 RTMRel was used
    for <code>MSBuild</code>
  </p>
  <p>
    Generating a Visual Studio solution is simple, we just have to use a Visual
    Studio generator when we invoke CMake.
  </p>

  <section class="terminal">
    <pre>
<span class="ansiBold ansiForeground-red"> </span><span class="ansiBold ansiForeground-blue">&gt;</span> mkdir visualStudio
<span class="ansiBold ansiForeground-red"> </span><span class="ansiBold ansiForeground-blue">&gt;</span> cd visualStudio
<span class="ansiBold ansiForeground-red"> </span><span class="ansiBold ansiForeground-blue">&gt;</span> cmake -G &quot;Visual Studio 10&quot; ..
-- Check for working C compiler using: Visual Studio 10
-- Check for working C compiler using: Visual Studio 10 -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working CXX compiler using: Visual Studio 10
-- Check for working CXX compiler using: Visual Studio 10 -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Configuring done
-- Generating done
-- Build files have been written to: M:/Programming/C++/CMake Tutorial/flavors/part1_step2/visualStudio
</pre>
  </section>

  <p>
    It is important to note that there are different generators for different
    versions of Visual Studio, so you will have to make sure that you chose the
    generator most appropriate for your Visual Studio install. CMake&#8217;s output is
    actually a lot shorter than when we
    <a href="https://www.johnlamp.net/cmake-tutorial-1-getting-started.html#Step1Output">first</a>    ran it. You will notice that CMake uses Visual Studio to compile rather than
    interacting directly with the compiler.
  </p>
  <p>
    Of course we still did an out-of-source build so the Visual Studio project
    files will not clutter your source tree. This is what CMake created:
  </p>

  <img class="screenshot" src="https://www.johnlamp.net/screenshots/cmt-2/visualStudio/files.png" alt="[generated files]" />
  <p>
    As you can see CMake created several Visual Studio files. The one we really
    care about is <code>To Do List.sln</code>, as you can see this is named
    after our CMake project. If file names containing spaces cause problems for
    you, or are inconvenient, then you will want to make sure your project names
    do not contain spaces. Let&#8217;s see what kind of solution CMake created.
  </p>
  <p class="note">
    <em class="call-out">Note:</em> When you open the solution Visual Studio may
    display a Security Warning because it doesn&#8217;t trust the projects. This seems
    to be caused by CMake creating them not Visual Studio. You can just click
    &#8220;OK&#8221;.
  </p>

  <img class="screenshot" src="https://www.johnlamp.net/screenshots/cmt-2/visualStudio/project.png" alt="[Visual Studio project window]" />
  <p>
    The generated solution is a bit more complicated than what you would have
    created by hand. There are 3 more projects than you would have expected
    since we are only building one executable and nothing else. Each project
    does, however, have a purpose:
  </p>
  <dl>
    <dt>ALL_BUILD</dt>
    <dd>
      This project builds all of the targets that are defined in
      the <code>CMakeLists.txt</code>. Since we only have one in ours it is a
      bit redundant.
    </dd>

    <dt>RUN_TESTS</dt>
    <dd>
      Building this project runs CTest in much the same way that <kbd>make
        test</kbd> did. It creates the same output files, too. CTest&#8217;s output is
        also displayed in the Output Window. Just as before this does not depend
        on any of your targets, so if your tests depend on any targets be sure
        to build them first.
    </dd>

    <dt>toDo</dt>
    <dd>
      This is the little command line tool we are building. It corresponds to
      the <code>add_executable</code> command we have in
      our <code>CMakeLists.txt</code>.
    </dd>

    <dt>ZERO_CHECK</dt>
    <dd>
      This is a rather oddly named project. It&#8217;s purpose is to make sure that
      the Visual Studio solution and its projects are all up to date. If you
      modify the <code>CMakeLists.txt</code> this project will update your
      Visual Studio solution. All other projects depend on this one so you don&#8217;t
      have to build it manually. Unfortunately when the solution and projects
      are updated by this Visual Studio will, for each one updated, ask you if
      you want to reload it, which can get a bit annoying.
    </dd>
  </dl>
  <p>
    If you look at the &#8220;toDo&#8221; project you will notice that it only contains
    the <code>.cc</code> files. This is because those are the only files listed
    in the <code>CMakeLists.txt</code> for the toDo target. If you were to
    add <code>ToDo.h</code> to the toDo target it would appear in the &#8220;toDo&#8221;
    project in Visual Studio.
  </p>

  <p>
    Let&#8217;s try and build and see what happens.
  </p>
  <img class="screenshot" src="https://www.johnlamp.net/screenshots/cmt-2/visualStudio/build.png" alt="[Visual Studio build]" />
  <p>
    I used the &#8220;Start Debugging&#8221; button on the toolbar which tried to debug the
    &#8220;ALL_BUILD&#8221; project. So while it successfully built toDo.exe it was not run
    since &#8220;ALL_BUILD&#8221; does not produce any outputs, much less an executable. So if
    you want to actually debug &#8220;toDo&#8221; you will have to explicitly pick that
    project. If we explicitly debug the &#8220;toDo&#8221; project we get what we were
    expecting.
  </p>
  <p class="note">
    <em class="call-out">Note:</em> If you set the project you want to debug as
    the &#8220;StartUp&#8221; project Visual Studio will debug it when you click the &#8220;Start
    Debugging&#8221; button. You can recognize the &#8220;StartUp&#8221; project as its name will
    be bold. To do this right click on the project and pick &#8220;Set as StartUp
    Project&#8221;.
  </p>

  <img class="screenshot" src="https://www.johnlamp.net/screenshots/cmt-2/visualStudio/build2.png" alt="[Visual Studio build, second try]" />
  <p>
    Unfortunately our program is run in a command window that closes as soon as
    our program completes, so we don&#8217;t get to see its output. However the Output
    Window in Visual Studio shows that toDo exited with a code of 0 which means
    our test still passes. So everything works fine in Visual Studio.
  </p>

  <p>
    If you need to be able to build from the command line either because you
    prefer to or for an automated build process you can use
    the <code>MSBuild</code> command.
  </p>
  <p class="note">
    <em class="call-out">Note:</em> <code>MSBuild</code> does not appear to be
    included with Visual Studio Express, but only Visual Studio Professional.
  </p>
  <section class="terminal">
    <pre>
<span class="ansiBold ansiForeground-red"> </span><span class="ansiBold ansiForeground-blue">&gt;</span> cd visualStudio
<span class="ansiBold ansiForeground-red"> </span><span class="ansiBold ansiForeground-blue">&gt;</span> MSBuild ALL_BUILD.vcxproj
Microsoft (R) Build Engine Version 4.0.30319.1
[Microsoft .NET Framework, Version 4.0.30319.269]
Copyright (C) Microsoft Corporation 2007. All rights reserved.
Build started 7/22/2012 1:18:41 AM.
Project &quot;M:\Programming\C++\CMake Tutorial\flavors\part1_step2\visualStudio\ALL_BUILD.vcxproj&quot; on node 1 (default targets).
Project &quot;M:\Programming\C++\CMake Tutorial\flavors\part1_step2\visualStudio\ALL_BUILD.vcxproj&quot; (1) is building &quot;M:\Programming\C++\CMake Tutorial\flavors\part1_step2\visualStudio\ZERO_CHECK.vcxproj&quot; (2) on node 1 (default targets).
PrepareForBuild:
  Creating directory &quot;Win32\Debug\ZERO_CHECK\&quot;.
  Creating directory &quot;Debug\&quot;.
InitializeBuildStatus:
  Creating &quot;Win32\Debug\ZERO_CHECK\ZERO_CHECK.unsuccessfulbuild&quot; because &quot;AlwaysCreate&quot; was specified.
CustomBuild:
  Checking Build System
  CMake does not need to re-run because M:/Programming/C++/CMake Tutorial/flavors/part1_step2/visualStudio/CMakeFiles/generate.stamp is up-to-date.
FinalizeBuildStatus:
  Deleting file &quot;Win32\Debug\ZERO_CHECK\ZERO_CHECK.unsuccessfulbuild&quot;.
  Touching &quot;Win32\Debug\ZERO_CHECK\ZERO_CHECK.lastbuildstate&quot;.
Done Building Project &quot;M:\Programming\C++\CMake Tutorial\flavors\part1_step2\visualStudio\ZERO_CHECK.vcxproj&quot; (default targets).
Project &quot;M:\Programming\C++\CMake Tutorial\flavors\part1_step2\visualStudio\ALL_BUILD.vcxproj&quot; (1) is building &quot;M:\Programming\C++\CMake Tutorial\flavors\part1_step2\visualStudio\toDo.vcxproj&quot; (3) on node 1 (default targets).
PrepareForBuild:
  Creating directory &quot;toDo.dir\Debug\&quot;.
InitializeBuildStatus:
  Creating &quot;toDo.dir\Debug\toDo.unsuccessfulbuild&quot; because &quot;AlwaysCreate&quot; was specified.
CustomBuild:
  Building Custom Rule M:/Programming/C++/CMake Tutorial/flavors/part1_step2/CMakeLists.txt
  CMake does not need to re-run because M:\Programming\C++\CMake Tutorial\flavors\part1_step2\visualStudio\CMakeFiles\generate.stamp is up-to-date.
ClCompile:
  C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\bin\CL.exe /c /Zi /nologo /W3 /WX- /Od /Ob0 /Oy- /D WIN32 /D _WINDOWS /D _DEBUG /D &quot;CMAKE_INTDIR=\&quot;Debug\&quot;&quot; /D _MBCS /Gm- /MDd /GS /fp:precise /Zc:wchar_t /Zc:forScope /GR /Fo&quot;toDo.dir\Debug\\&quot; /Fd&quot;M:/Programming/C++/CMake Tutorial/flavors/part1_step2/visualStudio/Debug/toDo.pdb&quot; /Gd /TP /analyze- /errorReport:queue &quot;M:\Programming\C++\CMake Tutorial\flavors\part1_step2\main.cc&quot; &quot;M:\Programming\C++\CMake Tutorial\flavors\part1_step2\ToDo.cc&quot;  /Zm1000 /GX /GZ
cl : Command line warning D9035: option 'GX' has been deprecated and will be removed in a future release [M:\Programming\C++\CMake Tutorial\flavors\part1_step2\visualStudio\toDo.vcxproj]
cl : Command line warning D9036: use 'EHsc' instead of 'GX' [M:\Programming\C++\CMake Tutorial\flavors\part1_step2\visualStudio\toDo.vcxproj]
cl : Command line warning D9035: option 'GZ' has been deprecated and will be removed in a future release [M:\Programming\C++\CMake Tutorial\flavors\part1_step2\visualStudio\toDo.vcxproj]
cl : Command line warning D9036: use 'RTC1' instead of 'GZ' [M:\Programming\C++\CMake Tutorial\flavors\part1_step2\visualStudio\toDo.vcxproj]
  main.cc
  ToDo.cc
  Generating Code...
ManifestResourceCompile:
  C:\Program Files (x86)\Microsoft SDKs\Windows\v7.0A\bin\rc.exe /nologo /fo&quot;toDo.dir\Debug\toDo.exe.embed.manifest.res&quot; toDo.dir\Debug\toDo_manifest.rc
Link:
  C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\bin\link.exe /ERRORREPORT:QUEUE /OUT:&quot;M:\Programming\C++\CMake Tutorial\flavors\part1_step2\visualStudio\Debug\toDo.exe&quot; /INCREMENTAL /NOLOGO kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib /MANIFEST /ManifestFile:&quot;toDo.dir\Debug\toDo.exe.intermediate.manifest&quot; /MANIFESTUAC:&quot;level='asInvoker' uiAccess='false'&quot; /DEBUG /PDB:&quot;M:/Programming/C++/CMake Tutorial/flavors/part1_step2/visualStudio/Debug/toDo.pdb&quot; /SUBSYSTEM:CONSOLE /STACK:&quot;10000000&quot; /TLBID:1 /DYNAMICBASE /NXCOMPAT /IMPLIB:&quot;M:/Programming/C++/CMake Tutorial/flavors/part1_step2/visualStudio/Debug/toDo.lib&quot; /MACHINE:X86 toDo.dir\Debug\toDo.exe.embed.manifest.res
  toDo.dir\Debug\main.obj
  toDo.dir\Debug\ToDo.obj  /machine:X86 /debug
Manifest:
  C:\Program Files (x86)\Microsoft SDKs\Windows\v7.0A\bin\mt.exe /nologo /verbose /out:&quot;toDo.dir\Debug\toDo.exe.embed.manifest&quot; /manifest toDo.dir\Debug\toDo.exe.intermediate.manifest
  C:\Program Files (x86)\Microsoft SDKs\Windows\v7.0A\bin\rc.exe /nologo /fo&quot;toDo.dir\Debug\toDo.exe.embed.manifest.res&quot; toDo.dir\Debug\toDo_manifest.rc
LinkEmbedManifest:
  C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\bin\link.exe /ERRORREPORT:QUEUE /OUT:&quot;M:\Programming\C++\CMake Tutorial\flavors\part1_step2\visualStudio\Debug\toDo.exe&quot; /INCREMENTAL /NOLOGO kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib /MANIFEST /ManifestFile:&quot;toDo.dir\Debug\toDo.exe.intermediate.manifest&quot; /MANIFESTUAC:&quot;level='asInvoker' uiAccess='false'&quot; /DEBUG /PDB:&quot;M:/Programming/C++/CMake Tutorial/flavors/part1_step2/visualStudio/Debug/toDo.pdb&quot; /SUBSYSTEM:CONSOLE /STACK:&quot;10000000&quot; /TLBID:1 /DYNAMICBASE /NXCOMPAT /IMPLIB:&quot;M:/Programming/C++/CMake Tutorial/flavors/part1_step2/visualStudio/Debug/toDo.lib&quot; /MACHINE:X86 toDo.dir\Debug\toDo.exe.embed.manifest.res
  toDo.dir\Debug\main.obj
  toDo.dir\Debug\ToDo.obj  /machine:X86 /debug
  toDo.vcxproj -&gt; M:\Programming\C++\CMake Tutorial\flavors\part1_step2\visualStudio\Debug\toDo.exe
FinalizeBuildStatus:
  Deleting file &quot;toDo.dir\Debug\toDo.unsuccessfulbuild&quot;.
  Touching &quot;toDo.dir\Debug\toDo.lastbuildstate&quot;.
Done Building Project &quot;M:\Programming\C++\CMake Tutorial\flavors\part1_step2\visualStudio\toDo.vcxproj&quot; (default targets).
PrepareForBuild:
  Creating directory &quot;Win32\Debug\ALL_BUILD\&quot;.
InitializeBuildStatus:
  Creating &quot;Win32\Debug\ALL_BUILD\ALL_BUILD.unsuccessfulbuild&quot; because &quot;AlwaysCreate&quot; was specified.
CustomBuild:
  Building Custom Rule M:/Programming/C++/CMake Tutorial/flavors/part1_step2/CMakeLists.txt
  CMake does not need to re-run because M:\Programming\C++\CMake Tutorial\flavors\part1_step2\visualStudio\CMakeFiles\generate.stamp is up-to-date.
  Build all projects
FinalizeBuildStatus:
  Deleting file &quot;Win32\Debug\ALL_BUILD\ALL_BUILD.unsuccessfulbuild&quot;.
  Touching &quot;Win32\Debug\ALL_BUILD\ALL_BUILD.lastbuildstate&quot;.
Done Building Project &quot;M:\Programming\C++\CMake Tutorial\flavors\part1_step2\visualStudio\ALL_BUILD.vcxproj&quot; (default targets).
Build succeeded.
&quot;M:\Programming\C++\CMake Tutorial\flavors\part1_step2\visualStudio\ALL_BUILD.vcxproj&quot; (default target) (1) -&gt;
&quot;M:\Programming\C++\CMake Tutorial\flavors\part1_step2\visualStudio\toDo.vcxproj&quot; (default target) (3) -&gt;
(ClCompile target) -&gt;
  cl : Command line warning D9035: option 'GX' has been deprecated and will be removed in a future release [M:\Programming\C++\CMake Tutorial\flavors\part1_step2\visualStudio\toDo.vcxproj]
  cl : Command line warning D9036: use 'EHsc' instead of 'GX' [M:\Programming\C++\CMake Tutorial\flavors\part1_step2\visualStudio\toDo.vcxproj]
  cl : Command line warning D9035: option 'GZ' has been deprecated and will be removed in a future release [M:\Programming\C++\CMake Tutorial\flavors\part1_step2\visualStudio\toDo.vcxproj]
  cl : Command line warning D9036: use 'RTC1' instead of 'GZ' [M:\Programming\C++\CMake Tutorial\flavors\part1_step2\visualStudio\toDo.vcxproj]
    4 Warning(s)
    0 Error(s)
Time Elapsed 00:00:05.49
</pre>
  </section>
  <dl>
    <dt><kbd>MSBuild ALL_BUILD.vcxproj</kbd></dt>
    <dd>
      The <code>MSBuild</code> tool requires the project to build as a command
      line argument. In this case I built everything. As you can see its output
      is rather verbose. <span class="subtle">(Also it seems the projects
      created by CMake could use some updating.)</span>
      <br />
      <a href="http://msdn.microsoft.com/en-us/library/0k6kkbsd.aspx">reference</a>,      <a href="http://msdn.microsoft.com/en-us/library/ms164311.aspx">command line reference</a>      <time class="access">(2012-07-22)</time>
    </dd>
  </dl>
</section>

<section>
  <h1 id="section-Xcode">Xcode</h1>
  <h2 id="section-MacOsX">Mac OS X</h2>
  <p class="subtle">
    Xcode Version 4.1 Build 4B110 was used.
  </p>
  <p>
    Generating an Xcode project is very similar to generating any other project:
  </p>

  <section class="terminal">
    <pre>
<span class="ansiBold ansiForeground-red"> </span><span class="ansiBold ansiForeground-blue">&gt;</span> mkdir xcode
<span class="ansiBold ansiForeground-red"> </span><span class="ansiBold ansiForeground-blue">&gt;</span> cd xcode
<span class="ansiBold ansiForeground-red"> </span><span class="ansiBold ansiForeground-blue">&gt;</span> cmake -G &quot;Xcode&quot; ..
-- The C compiler identification is GNU 4.2.1
-- The CXX compiler identification is GNU 4.2.1
-- Checking whether C compiler has -isysroot
-- Checking whether C compiler has -isysroot - yes
-- Checking whether C compiler supports OSX deployment target flag
-- Checking whether C compiler supports OSX deployment target flag - yes
-- Check for working C compiler using: Xcode
-- Check for working C compiler using: Xcode -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Checking whether CXX compiler has -isysroot
-- Checking whether CXX compiler has -isysroot - yes
-- Checking whether CXX compiler supports OSX deployment target flag
-- Checking whether CXX compiler supports OSX deployment target flag - yes
-- Check for working CXX compiler using: Xcode
-- Check for working CXX compiler using: Xcode -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Configuring done
-- Generating done
-- Build files have been written to: /Volumes/Documents/Programming/C++/CMake Tutorial/flavors/part1_step2/xcode
</pre>
  </section>

  <p>
    If you look closely you will notice that most of CMake&#8217;s output looks the
    same as it did when we
    <a href="https://www.johnlamp.net/cmake-tutorial-1-getting-started.html#Step1Output">first</a>    ran it. In fact the only major difference is that CMake doesn&#8217;t directly
    interact with the compiler, it uses Xcode instead.  We are still doing an
    out-of-source build so even the Xcode project won&#8217;t clutter your source
    tree. CMake created the following files:
  </p>

  <img class="screenshot-osX" src="https://www.johnlamp.net/screenshots/cmt-2/xcode/files.png" alt="[generated files]" />
  <p>
    Most of these files will look familiar if you had looked at what files CMake
    generated before.  The most important file is <code>To Do
    List.xcodeproj</code>. Note that the project file is named after the project
    command in <code>CMakeLists.txt</code>. If spaces in file names cause
    trouble in your environment then you will want to ensure your project names
    have no spaces. Now let&#8217;s take a look at the project CMake created for us.
  </p>

  <img class="screenshot-osX" src="https://www.johnlamp.net/screenshots/cmt-2/xcode/project.png" alt="[Xcode project window]" />
  <p>
    The project is not as neat as one you would have made by hand. Most
    conspicuously <code>ToDo.h</code> is missing. This is because CMake doesn&#8217;t
    actually know about it. However because it is in the same directory
    as <code>ToDo.cc</code> the compiler will still find it. If you were to
    include <code>ToDo.h</code> in the <code>add_executable()</code> command
    then it would be included in the Xcode project. Both Xcode and CMake know
    not to compile header files so there would be no actual effect on the build.
  </p>
  <p>
    You will notice the extra folders &#8220;ALL_BUILD&#8221; and &#8220;ZERO_CHECK&#8221;, these
    actually correspond to particular Xcode targets created by CMake. These are
    the targets created by CMake:
  </p>

  <img class="screenshot" src="https://www.johnlamp.net/screenshots/cmt-2/xcode/targets.png" alt="[Xcode targets]" />
  <dl>
    <dt>ZERO_CHECK</dt>
    <dd>
      This oddly named target checks your <code>CMakeLists.txt</code> and
      updates your project as needed. Just as with the generated Makefile.
    </dd>
    <dt>toDo</dt>
    <dd>
      This is our executable as specified by the <code>add_executable()</code>
      command. This will build our little command line tool.
    </dd>
    <dt>RUN_TESTS</dt>
    <dd>
      This runs CTest just as <kbd>make test</kbd> did before. It produces the
      same output files as before, too. CTest&#8217;s output, however, is not
      displayed, but it can be found using the Log Navigator. Also as before it
      does not depend on any other targets, e.g. &#8220;toDo,&#8221; even if a test does.
    </dd>
    <dt>ALL_BUILD</dt>
    <dd>
      This builds all targets except &#8220;RUN_TESTS&#8221; just as <kbd>make</kbd> did
      before. Since we only specified one target, &#8220;toDo,&#8221; this target is
      redundant, but if we had specified other targets, say another executable,
      this would build them all.
    </dd>
  </dl>

  <p>
    Let&#8217;s build toDo and see what output Xcode produces.
  </p>

  <img class="screenshot-osX" src="https://www.johnlamp.net/screenshots/cmt-2/xcode/build.png" alt="[Xcode build]" />
  <p>
    The &#8220;Run&#8221; button in Xcode builds and then runs the target. The build
    succeeded and the test still passes; so far everything works fine in
    Xcode. You will notice, though, that we now have a warning. If you were to
    look in Xcode you will find
    that <code>-Wmost</code>, <code>-Wno-four-char-constants</code>,
    and <code>-Wno-unknown-pragmas</code> are passed to gcc by
    Xcode. Our <code>CMakeLists.txt</code> doesn&#8217;t pass any additional options
    to the compiler so when we were using the Makefile generator we were using
    gcc&#8217;s default settings. For now don&#8217;t worry about the warning, we will get
    to that in
    <a href="https://www.johnlamp.net/cmake-tutorial-3-gui-tool.html#section-FirstFixAWarning">chapter 3</a>.  </p>

  <p>
    Now if you prefer to work from the command line but must use Xcode you can
    use the <code>xcodebuild</code> tool provided by Apple.
  </p>

  <section class="terminal">
    <pre>
<span class="ansiBold ansiForeground-red"> </span><span class="ansiBold ansiForeground-blue">&gt;</span> cd xcode
<span class="ansiBold ansiForeground-red"> </span><span class="ansiBold ansiForeground-blue">&gt;</span> xcodebuild -list
Information about project &quot;To Do List&quot;:
    Targets:
        ALL_BUILD
        RUN_TESTS
        ZERO_CHECK
        toDo
    Build Configurations:
        Debug
        Release
        MinSizeRel
        RelWithDebInfo
    If no build configuration is specified &quot;Debug&quot; is used.
<span class="ansiBold ansiForeground-red"> </span><span class="ansiBold ansiForeground-blue">&gt;</span> xcodebuild
=== BUILD AGGREGATE TARGET ZERO_CHECK OF PROJECT To Do List WITH THE DEFAULT CONFIGURATION (Debug) ===
Check dependencies
PhaseScriptExecution &quot;CMake Rules&quot; &quot;xcode/To Do List.build/Debug/ZERO_CHECK.build/Script-1D0B6873874D4ED8AF14DE31.sh&quot;
    cd &quot;/Volumes/Documents/Programming/C++/CMake Tutorial/flavors/part1_step2&quot;
    /bin/sh -c &quot;\&quot;/Volumes/Documents/Programming/C++/CMake Tutorial/flavors/part1_step2/xcode/To Do List.build/Debug/ZERO_CHECK.build/Script-1D0B6873874D4ED8AF14DE31.sh\&quot;&quot;
echo &quot;&quot;
make -f /Volumes/Documents/Programming/C++/CMake\ Tutorial/flavors/part1_step2/xcode/CMakeScripts/ReRunCMake.make
make[1]: `CMakeFiles/cmake.check_cache' is up to date.
=== BUILD NATIVE TARGET toDo OF PROJECT To Do List WITH THE DEFAULT CONFIGURATION (Debug) ===
Check dependencies
CompileC &quot;xcode/To Do List.build/Debug/toDo.build/Objects-normal/x86_64/ToDo.o&quot; ToDo.cc normal x86_64 c++ com.apple.compilers.llvmgcc42
    cd &quot;/Volumes/Documents/Programming/C++/CMake Tutorial/flavors/part1_step2&quot;
    setenv LANG en_US.US-ASCII
    /Developer/usr/bin/llvm-gcc-4.2 -x c++ -arch x86_64 -fmessage-length=0 -pipe -Wno-trigraphs -fpascal-strings -O0 &quot;-DCMAKE_INTDIR=\&quot;Debug\&quot;&quot; -isysroot /Developer/SDKs/MacOSX10.7.sdk -fasm-blocks -mmacosx-version-min=10.7 -gdwarf-2 &quot;-I/Volumes/Documents/Programming/C++/CMake Tutorial/flavors/part1_step2/xcode/Debug/include&quot; &quot;-I/Volumes/Documents/Programming/C++/CMake Tutorial/flavors/part1_step2/xcode/To Do List.build/Debug/toDo.build/DerivedSources/x86_64&quot; &quot;-I/Volumes/Documents/Programming/C++/CMake Tutorial/flavors/part1_step2/xcode/To Do List.build/Debug/toDo.build/DerivedSources&quot; -Wmost -Wno-four-char-constants -Wno-unknown-pragmas &quot;-F/Volumes/Documents/Programming/C++/CMake Tutorial/flavors/part1_step2/xcode/Debug&quot; -c &quot;/Volumes/Documents/Programming/C++/CMake Tutorial/flavors/part1_step2/ToDo.cc&quot; -o &quot;/Volumes/Documents/Programming/C++/CMake Tutorial/flavors/part1_step2/xcode/To Do List.build/Debug/toDo.build/Objects-normal/x86_64/ToDo.o&quot;
CompileC &quot;xcode/To Do List.build/Debug/toDo.build/Objects-normal/x86_64/main.o&quot; main.cc normal x86_64 c++ com.apple.compilers.llvmgcc42
    cd &quot;/Volumes/Documents/Programming/C++/CMake Tutorial/flavors/part1_step2&quot;
    setenv LANG en_US.US-ASCII
    /Developer/usr/bin/llvm-gcc-4.2 -x c++ -arch x86_64 -fmessage-length=0 -pipe -Wno-trigraphs -fpascal-strings -O0 &quot;-DCMAKE_INTDIR=\&quot;Debug\&quot;&quot; -isysroot /Developer/SDKs/MacOSX10.7.sdk -fasm-blocks -mmacosx-version-min=10.7 -gdwarf-2 &quot;-I/Volumes/Documents/Programming/C++/CMake Tutorial/flavors/part1_step2/xcode/Debug/include&quot; &quot;-I/Volumes/Documents/Programming/C++/CMake Tutorial/flavors/part1_step2/xcode/To Do List.build/Debug/toDo.build/DerivedSources/x86_64&quot; &quot;-I/Volumes/Documents/Programming/C++/CMake Tutorial/flavors/part1_step2/xcode/To Do List.build/Debug/toDo.build/DerivedSources&quot; -Wmost -Wno-four-char-constants -Wno-unknown-pragmas &quot;-F/Volumes/Documents/Programming/C++/CMake Tutorial/flavors/part1_step2/xcode/Debug&quot; -c &quot;/Volumes/Documents/Programming/C++/CMake Tutorial/flavors/part1_step2/main.cc&quot; -o &quot;/Volumes/Documents/Programming/C++/CMake Tutorial/flavors/part1_step2/xcode/To Do List.build/Debug/toDo.build/Objects-normal/x86_64/main.o&quot;
/Volumes/Documents/Programming/C++/CMake Tutorial/flavors/part1_step2/main.cc: In function 'int equalityTest(T1, T2, const char*, const char*, const char*, int) [with T1 = long unsigned int, T2 = int]':
/Volumes/Documents/Programming/C++/CMake Tutorial/flavors/part1_step2/main.cc:34:   instantiated from here
/Volumes/Documents/Programming/C++/CMake Tutorial/flavors/part1_step2/main.cc:58: warning: comparison between signed and unsigned integer expressions
Ld xcode/Debug/toDo normal x86_64
    cd &quot;/Volumes/Documents/Programming/C++/CMake Tutorial/flavors/part1_step2&quot;
    setenv MACOSX_DEPLOYMENT_TARGET 10.7
    /Developer/usr/bin/llvm-g++-4.2 -arch x86_64 -isysroot /Developer/SDKs/MacOSX10.7.sdk &quot;-L/Volumes/Documents/Programming/C++/CMake Tutorial/flavors/part1_step2/xcode/Debug&quot; &quot;-F/Volumes/Documents/Programming/C++/CMake Tutorial/flavors/part1_step2/xcode/Debug&quot; -filelist &quot;/Volumes/Documents/Programming/C++/CMake Tutorial/flavors/part1_step2/xcode/To Do List.build/Debug/toDo.build/Objects-normal/x86_64/toDo.LinkFileList&quot; -mmacosx-version-min=10.7 -Wl,-search_paths_first -Wl,-headerpad_max_install_names -o &quot;/Volumes/Documents/Programming/C++/CMake Tutorial/flavors/part1_step2/xcode/Debug/toDo&quot;
PhaseScriptExecution &quot;CMake PostBuild Rules&quot; &quot;xcode/To Do List.build/Debug/toDo.build/Script-01429AA71A364B6AAE9CB89B.sh&quot;
    cd &quot;/Volumes/Documents/Programming/C++/CMake Tutorial/flavors/part1_step2&quot;
    /bin/sh -c &quot;\&quot;/Volumes/Documents/Programming/C++/CMake Tutorial/flavors/part1_step2/xcode/To Do List.build/Debug/toDo.build/Script-01429AA71A364B6AAE9CB89B.sh\&quot;&quot;
echo &quot;Depend check for xcode&quot;
Depend check for xcode
cd /Volumes/Documents/Programming/C++/CMake\ Tutorial/flavors/part1_step2/xcode &amp;&amp; make -C /Volumes/Documents/Programming/C++/CMake\ Tutorial/flavors/part1_step2/xcode -f /Volumes/Documents/Programming/C++/CMake\ Tutorial/flavors/part1_step2/xcode/CMakeScripts/XCODE_DEPEND_HELPER.make PostBuild.toDo.Debug
make[1]: Nothing to be done for `PostBuild.toDo.Debug'.
=== BUILD AGGREGATE TARGET ALL_BUILD OF PROJECT To Do List WITH THE DEFAULT CONFIGURATION (Debug) ===
Check dependencies
PhaseScriptExecution &quot;CMake Rules&quot; &quot;xcode/To Do List.build/Debug/ALL_BUILD.build/Script-48A6EF12B1004D59A240CCC6.sh&quot;
    cd &quot;/Volumes/Documents/Programming/C++/CMake Tutorial/flavors/part1_step2&quot;
    /bin/sh -c &quot;\&quot;/Volumes/Documents/Programming/C++/CMake Tutorial/flavors/part1_step2/xcode/To Do List.build/Debug/ALL_BUILD.build/Script-48A6EF12B1004D59A240CCC6.sh\&quot;&quot;
echo &quot;&quot;
echo Build\ all\ projects
Build all projects
** BUILD SUCCEEDED **
</pre>
  </section>

  <dl>
    <dt><kbd>xcodebuild -list</kbd></dt>
    <dd>
      This lists all the targets and all the build configurations set up in the
      Xcode project. Xcode, by default, uses the <code>xcodeproj</code> file in
      the current directory if there is only one, which is the case when using
      CMake.
      (<a href="https://developer.apple.com/library/mac/#documentation/Darwin/Reference/Manpages/man1/xcodebuild.1.html">man page</a>      <time class="access">2012-07-17</time>)
    </dd>

    <dt><kbd>xcodebuild</kbd></dt>
    <dd>
      <code>xcodebuild</code> assumes the first target if none is provided on
      the command line, much like <code>make</code>. Conveniently CMake
      made <code>ALL_BUILD</code> the first target. As you can see this builds
      everything and is a lot more verbose than the makefile created by CMake.
    </dd>
  </dl>

  <h2 id="section-Ios">iOS</h2>
  <p>
    While cross-compiling will not be covered until later you can build for iOS
    using CMake and the Xcode generator. There is a Google Code Project
    specifically for this:
    <a href="http://code.google.com/p/ios-cmake/">ios-cmake</a>    <time class="access">(2012-07-09)</time>.
</section>

<section>
  <h1 id="section-EclipseCdt4">Eclipse CDT4</h1>
  <p class="subtle">
    Eclipse Indigo Version 3.7.2 Build I20110613-1736 was used.
  </p>
  <p>
    If you want to use Eclipse you simply need to tell CMake so when you
    generate your project files.
  </p>

  <section class="terminal">
    <pre>
<span class="ansiBold ansiForeground-red"> </span><span class="ansiBold ansiForeground-blue">&gt;</span> mkdir eclipse
<span class="ansiBold ansiForeground-red"> </span><span class="ansiBold ansiForeground-blue">&gt;</span> cd eclipse
<span class="ansiBold ansiForeground-red"> </span><span class="ansiBold ansiForeground-blue">&gt;</span> cmake -G &quot;Eclipse CDT4 - Unix Makefiles&quot; ..
-- The C compiler identification is GNU
-- The CXX compiler identification is GNU
-- Could not determine Eclipse version, assuming at least 3.6 (Helios). Adjust CMAKE_ECLIPSE_VERSION if this is wrong.
-- Check for working C compiler: /usr/bin/gcc
-- Check for working C compiler: /usr/bin/gcc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/c++
-- Check for working CXX compiler: /usr/bin/c++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Configuring done
CMake Warning in CMakeLists.txt:
  The build directory is a subdirectory of the source directory.
  This is not supported well by Eclipse.  It is strongly recommended to use a
  build directory which is a sibling of the source directory.
-- Generating done
-- Build files have been written to: /home/john/Desktop/part1_step2/eclipse
<span class="ansiBold ansiForeground-red"> </span><span class="ansiBold ansiForeground-blue">&gt;</span> ls -A
CMakeCache.txt  cmake_install.cmake  CTestTestfile.cmake  .project
<span class="ansiBold ansiForeground-blue">CMakeFiles</span>      .cproject            Makefile
</pre>
  </section>
  <p>
    Well perhaps it isn&#8217;t actually that simple. CMake warns us that Eclipse
    doesn&#8217;t like the build directory being a subdirectory of the source
    directory. As you can see it created the <code>.project</code>
    and <code>.cproject</code> files required by Eclipse CDT.
  </p>

  <img class="screenshot" src="https://www.johnlamp.net/screenshots/cmt-2/eclipse/project.png" alt="[Eclipse project window]" />  <p>
    The project looks okay, however it isn&#8217;t. Certain aspects of the project
    will not function properly. So we will learn from our mistake and follow
    CMake&#8217;s advice.
  </p>

  <section class="terminal">
    <pre>
<span class="ansiBold ansiForeground-red"> </span><span class="ansiBold ansiForeground-blue">&gt;</span> cd ..
<span class="ansiBold ansiForeground-red"> </span><span class="ansiBold ansiForeground-blue">&gt;</span> mkdir eclipse
<span class="ansiBold ansiForeground-red"> </span><span class="ansiBold ansiForeground-blue">&gt;</span> cd eclipse
<span class="ansiBold ansiForeground-red"> </span><span class="ansiBold ansiForeground-blue">&gt;</span> cmake -G &quot;Eclipse CDT4 - Unix Makefiles&quot; ../part1_step2/
-- The C compiler identification is GNU
-- The CXX compiler identification is GNU
-- Could not determine Eclipse version, assuming at least 3.6 (Helios). Adjust CMAKE_ECLIPSE_VERSION if this is wrong.
-- Check for working C compiler: /usr/bin/gcc
-- Check for working C compiler: /usr/bin/gcc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/c++
-- Check for working CXX compiler: /usr/bin/c++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Configuring done
-- Generating done
-- Build files have been written to: /home/john/Desktop/eclipse
<span class="ansiBold ansiForeground-red"> </span><span class="ansiBold ansiForeground-blue">&gt;</span> ls -a
<span class="ansiBold ansiForeground-blue">.</span>   CMakeCache.txt  cmake_install.cmake  CTestTestfile.cmake  .project
<span class="ansiBold ansiForeground-blue">..</span>  <span class="ansiBold ansiForeground-blue">CMakeFiles</span>      .cproject            Makefile
</pre>
  </section>
  <p>
    CMake&#8217;s output looks the same, save for the lack of a warning, and it also
    created the same files as before. The project should work fine this
    time. Let&#8217;s have a look.
  </p>

  <img class="screenshot" src="https://www.johnlamp.net/screenshots/cmt-2/eclipse/project2.png" alt="[Eclipse project window, take 2]" />  <p>
    The project looks a lot better this time. If you are familiar with Eclipse
    you may know that it only supports one target per project whereas CMake
    supports many. In fact managing builds of complex source trees is one of
    CMake&#8217;s strengths. These seem to be at odds with each other. If you looked
    closely before you would have noticed that CMake created a Makefile and
    created a Makefile project for Eclipse. This allows CMake to support
    multiple targets <i>and</i> work with Eclipse. The &#8220;[Subprojects]&#8221; folder
    lists every CMake project included, in our case there&#8217;s just one. Similarly
    the &#8220;[Targets]&#8221; folder lists all of the targets defined in
    your <code>CmakeLists.txt</code>. If you looked at any of the other IDE
    projects generated by CMake you may be surprised to see <code>ToDo.h</code>
    included. That is because the Eclipse project includes some virtual folders
    which display whatever files happened to be in the corresponding directory.
  </p>

  <p>
    Let&#8217;s try building our project and see if it still works.
  </p>
  <img class="screenshot" src="https://www.johnlamp.net/screenshots/cmt-2/eclipse/build.png" alt="[Eclipse build]" />  <p>
    It still builds fine and as you can see Eclipse uses make to do the
    building. Conveniently the binary executable &#8220;toDo&#8221; is added to the project
    so it can easily be run or debugged from within Eclipse.
  </p>

  <p>
    Eclipse supports Makefiles rather well so you can get it to build any of the
    available targets. Eclipse provides a convenient list.
  </p>
  <img class="screenshot" src="https://www.johnlamp.net/screenshots/cmt-2/eclipse/targets.png" alt="[Eclipse Makefile targets]" />  <p>
    The default is, of course, to build all targets. &#8220;[exe] toDo&#8221; is, of course
    our tiny example program. However there is also &#8220;[exe] toDo/fast&#8221; which has
    an intriguing name. The difference between the two is that the &#8220;fast&#8221;
    version doesn&#8217;t check if the <code>CmakeLists.txt</code> has changed or
    recalculate toDo&#8217;s dependencies. It also doesn&#8217;t calculate completion
    percentages. If you are sure that none of those have changed using a &#8220;fast&#8221;
    target can speed up your build a bit. However, the most interesting target
    here is &#8220;: test&#8221; which will run CTest just as <kbd>make test</kbd> did
    before. CTest&#8217;s output is displayed in the Build Console and the Testing
    directory is added to the project.
  </p>

  <img class="screenshot" src="https://www.johnlamp.net/screenshots/cmt-2/eclipse/test.png" alt="[Eclipse make test]" />  <p>
    As you can see the test still passes so everything works in Eclipse.
  </p>

  <p>
    If you desire to still build your project from the command line it is
    actually quite easy because CMake created Makefiles. So you can build just
    as you did before.
  </p>
  <section class="terminal">
    <pre>
<span class="ansiBold ansiForeground-red"> </span><span class="ansiBold ansiForeground-blue">&gt;</span> cd ../eclipse
<span class="ansiBold ansiForeground-red"> </span><span class="ansiBold ansiForeground-blue">&gt;</span> make
[ 50%] <span class="ansiForeground-green">Building CXX object CMakeFiles/toDo.dir/main.cc.o
</span>[100%] <span class="ansiForeground-green">Building CXX object CMakeFiles/toDo.dir/ToDo.cc.o
</span><span class="ansiBold ansiForeground-red">Linking CXX executable toDo
</span>[100%] Built target toDo
</pre>
  </section>
</section>

<section>
  <h1 id="section-Kdevelop">KDevelop</h1>
  <p>
    For KDevelop 3 CMake will generate a project for you to use. KDevelop 4,
    however, has native CMake support making that step unnecessary.
  </p>

  <h2 id="section-Generated(Kdevelop3)">Generated (KDevelop3)</h2>
  <p class="subtle">
    KDevelop Version 3.3.4 was used.
  </p>

  <p>
    If you want CMake to create a KDevelop project for you specify the
    &#8220;KDevelop3&#8221; generator. There is also a &#8220;KDevelop3 &#8211; Unix Makefiles&#8221; which
    generates the same exact files, so save yourself the typing.
  </p>

  <section class="terminal">
    <pre>
<span class="ansiBold ansiForeground-red"> </span><span class="ansiBold ansiForeground-blue">&gt;</span> mkdir kdevelop
<span class="ansiBold ansiForeground-red"> </span><span class="ansiBold ansiForeground-blue">&gt;</span> cd kdevelop
<span class="ansiBold ansiForeground-red"> </span><span class="ansiBold ansiForeground-blue">&gt;</span> cmake -G &quot;KDevelop3&quot; ..
-- The C compiler identification is GNU
-- The CXX compiler identification is GNU
-- Check for working C compiler: /usr/bin/gcc
-- Check for working C compiler: /usr/bin/gcc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/c++
-- Check for working CXX compiler: /usr/bin/c++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Configuring done
-- Generating done
-- Build files have been written to: /home/john/Desktop/part1_step2/kdevelop
</pre>
  </section>
  <p>
    The output looks similar to the first time we ran it. It produces a few
    extra files for KDevelop, though.
  </p>

  <img class="screenshot" src="https://www.johnlamp.net/screenshots/cmt-2/kdevelop3/files.png" alt="[KDevelop 3 files]" />  <p>
    The KDevelop 3 project file, <code>To Do List.kdevelop</code> is the most
    important of the new files. You will notice that CMake still created
    a <code>Makefile</code>. KDevelop&#8217;s Makefile support, however, is quite
    good. Let&#8217;s see the project.
  </p>

  <img class="screenshot" src="https://www.johnlamp.net/screenshots/cmt-2/kdevelop3/project.png" alt="[KDevelop 3 project]" />  <p>
    Oddly the &#8220;File List&#8221; only displays <code>ToDo.cc</code> even though we
    would expect it to also include <code>main.cc</code>. The &#8220;File Selector&#8221;
    shows all of the files in your source directory. Let&#8217;s see if we can still
    build.
  </p>

  <img class="screenshot" src="https://www.johnlamp.net/screenshots/cmt-2/kdevelop3/build.png" alt="[KDevelop 3 build]" />  <p>
    Of course it still builds. We are using the same <code>Makefile</code> as we
    originally did. The only difference this time is that KDevelop is running
    make for us. Thanks to KDevelop&#8217;s Makefile support we can actually build any
    target we want.
  </p>

  <img class="screenshot" src="https://www.johnlamp.net/screenshots/cmt-2/kdevelop3/targets.png" alt="[KDevelop 3 targets]" />  <p>
    By default KDevelop builds the target &#8220;all&#8221; which does exactly what you&#8217;d
    expect, it builds everything. There are a few targets that end with
    &#8220;/fast&#8221;. These &#8220;fast&#8221; targets skip some steps to save time, so be careful
    when using them. Dependency calculation and checking
    the <code>CMakeLists.txt</code> file for changes are skipped; also
    completion percentages aren&#8217;t printed. While these will build faster than
    the regular targets if there are any changes that require dependencies to be
    recalculated or any <code>CMakeLists.txt</code> have been changed you
    results will not be what you expected.
  </p>
  <p>
    Currently the most interesting target is &#8220;test&#8221;. Building this target is, of
    course, the same as running <kbd>make test</kbd>.
  </p>

  <img class="screenshot" src="https://www.johnlamp.net/screenshots/cmt-2/kdevelop3/test.png" alt="[KDevelop 3 test]" />  <p>
    Our test still passes. Don&#8217;t lie, I know you had doubts. CTest&#8217;s output is
    displayed in the Messages panel. Just as before CTest creates the same
    files, too.
  </p>

  <p>
    If you wanted to build from the command line it&#8217;s quite simple since we have
    a <code>Makefile</code> just as before.
  </p>
  <section class="terminal">
    <pre>
<span class="ansiBold ansiForeground-red"> </span><span class="ansiBold ansiForeground-blue">&gt;</span> cd kdevelop
<span class="ansiBold ansiForeground-red"> </span><span class="ansiBold ansiForeground-blue">&gt;</span> make
[ 50%] <span class="ansiForeground-green">Building CXX object CMakeFiles/toDo.dir/main.cc.o
</span>[100%] <span class="ansiForeground-green">Building CXX object CMakeFiles/toDo.dir/ToDo.cc.o
</span><span class="ansiBold ansiForeground-red">Linking CXX executable toDo
</span>[100%] Built target toDo
</pre>
  </section>

  <h2 id="section-CmakeSupport(Kdevelop4)">CMake Support (KDevelop4)</h2>
  <p class="subtle">
    KDevelop Version 4.3.1 was used.
  </p>

  <p>
    KDevelop 4 has built-in support for CMake projects. So rather than use a
    generator to make a new project file as was done in the previous examples we
    instead simply open the CMake project with KDevelop.
  </p>

  <p>
    After launching KDevelop 4 choose &#8220;Open / Import Project&#8230;&#8221; from the
    &#8220;Project Menu&#8221; and follow the steps of the import process. First you will
    have to find you <code>CmakeLists.txt</code> file. KDevelop will treat it as
    your project file. Next it will ask for a project name and build system. It
    will infer both and likely be correct. Lastly it will configure your build
    directory and CMake binary. Again the defaults are probably
    sufficient. After that you will get to see your project.
  </p>

  <img class="screenshot-kde" src="https://www.johnlamp.net/screenshots/cmt-2/kdevelop4/project.png" alt="[KDevelop 4 project]" />
  <p>
    The file list shows all files that are actually in the project
    directory. Conveniently this include <code>ToDo.h</code>. However you may
    also notice a <code>kdev4</code> project file. While KDevelop4 supports
    CMake, including out of source builds, it does put a project file in your
    source directory. Although since it is only one file it is easy to clean up
    <span class="subtle">(or have git ignore)</span>.
  </p>

  <p>
    Building is, of course, as simple as clicking the &#8220;Build Selection&#8221;
    button.
  </p>

  <img class="screenshot-kde" src="https://www.johnlamp.net/screenshots/cmt-2/kdevelop4/build.png" alt="[KDevelop 4 build]" />
  <p>
    You will notice that KDevelop still uses make to build the project. The main
    difference here is that KDevelop also runs CMake for you. These are the
    files it created:
  </p>

  <img class="screenshot-kde" src="https://www.johnlamp.net/screenshots/cmt-2/kdevelop4/files.png" alt="[KDevelop 4 files]" />
  <p>
    Exactly the files you should have expected.
  </p>

  <p>
    Now if I wanted to run our little program the &#8220;Execute&#8221; button doesn&#8217;t seem
    to work, it merely displays an error. However if I right-click on the &#8220;toDo&#8221;
    entry under the project and pick &#8220;Execute As&#8230;&#8221; &gt; &#8220;Native Application&#8221;
    it runs fine.
  </p>

  <img class="screenshot-kde" src="https://www.johnlamp.net/screenshots/cmt-2/kdevelop4/run.png" alt="[KDevelop 4 run]" />
  <p>
    Unfortunately I cannot find a way to run the tests from within KDevelop. As
    it does create a Makefile project the tests can be manually run from the
    command line. That seems like an ugly work-around, though.
  </p>

  <section class="terminal">
    <pre>
 <span class="ansiBold ansiForeground-blue">&gt;</span> cd kdevelop
 <span class="ansiBold ansiForeground-blue">&gt;</span> make test
<span class="ansiForeground-cyan">Running tests...
</span>Test project /Documents/Programming/C++/CMake Tutorial/flavors/part1_step2/kdevelop
    Start 1: toDoTest
1/1 Test #1: toDoTest .........................   Passed    0.01 sec
100% tests passed, 0 tests failed out of 1
Total Test time (real) =   0.05 sec
</pre>
  </section>

  <p>
    Since this is a Makefile project you can easily build from the command line
    using <kbd>make</kbd>.
  </p>

  <section class="terminal">
    <pre>
 <span class="ansiBold ansiForeground-blue">&gt;</span> cd kdevelop
 <span class="ansiBold ansiForeground-blue">&gt;</span> make
[ 50%] <span class="ansiForeground-green">Building CXX object CMakeFiles/toDo.dir/main.cc.o
</span>[100%] <span class="ansiForeground-green">Building CXX object CMakeFiles/toDo.dir/ToDo.cc.o
</span><span class="ansiBold ansiForeground-red">Linking CXX executable toDo
</span>[100%] Built target toDo
</pre>
  </section>

</section>

  </div>

  <footer class="entry-meta">
    This entry was tagged <a href="https://www.johnlamp.net/tag/cmake" rel="tag">CMake</a>, <a href="https://www.johnlamp.net/tag/long" rel="tag">long</a>, <a href="https://www.johnlamp.net/tag/tutorial" rel="tag">tutorial</a>. Bookmark the <a href="https://www.johnlamp.net/cmake-tutorial-2-ide-integration.html" title="Permalink to CMake Tutorial &#8211; Chapter&nbsp;2: IDE Integration" rel="bookmark">permalink</a>.     </footer>
     <footer class="entry-license"><div class="license"><a class="no-decoration" rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.en_US"><img alt="Creative Commons License" style="border-width: 0;" width="80" height="15" src="https://www.johnlamp.net/wp-content/themes/tutorial-theme/ccImages/by-nc-sa-r.png" /></a>This entry, "<span xmlns:dct="http://purl.org/dc/terms/" property="dct:title">CMake Tutorial &#8211; Chapter&nbsp;2: IDE Integration</span>," by <span xmlns:cc="http://creativecommons.org/ns#" property="cc:attributionName">John Lamp</span> is licensed under a <a rel="license" href="http://creativecommons.org/licensesby-nc-sa/by-nc-sa/3.0/deed.en_US">Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License</a>.</div></footer></article>
<nav role="navigation" id="nav-below" class="site-navigation post-navigation"><h1 class="assistive-text">Post navigation</h1><div class="nav-previous"><a href="https://www.johnlamp.net/cmake-tutorial-1-getting-started.html" rel="prev"><span class="meta-nav">&larr;</span> CMake Tutorial &#8211; Chapter&nbsp;1: Getting Started</a></div><div class="nav-next"><a href="https://www.johnlamp.net/cmake-tutorial-3-gui-tool.html" rel="next">CMake Tutorial &#8211; Chapter&nbsp;3: GUI Tool <span class="meta-nav">&rarr;</span></a></div></nav>
<div id="comments" class="comments-area">
          <h2 class="comments-title">
          7 thoughts on &ldquo;<span>CMake Tutorial &#8211; Chapter&nbsp;2: IDE Integration</span>&rdquo;        </h2>

        
        <ol class="commentlist">
          <li id="li-comment-918" class="comment even thread-even depth-1"><article id="comment-918" class="comment"><footer><div class="comment-meta commentmetadata"><a href="https://www.johnlamp.net/cmake-tutorial-2-ide-integration.html#comment-918"><time pubdate date-time="2014-11-09T19:55:15+00:00">2014-11-09 at 19:55:15</time></a></div><div class="comment-author vcard"><img alt='' src='https://secure.gravatar.com/avatar/f93fa3a7be63712033877fb4f29a2093?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/f93fa3a7be63712033877fb4f29a2093?s=80&amp;d=mm&amp;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /><cite class="fn">mayers</cite> <span class="says">said:</span></div></footer><div class="comment-content"><p>1-How do I run the RUN_TESTS from Visual Studio?  In other example(not a VS example)  you have shown running &#8220;make test&#8221; in a console will run all the specified test and create a Testing folder with the test run results.<br />
2-How do I get the INSTALL part of the CMakeLists.txt to run for Visual Studio if I want to install it in to a destination?</p>
</div><div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://www.johnlamp.net/cmake-tutorial-2-ide-integration.html?replytocom=918#respond' onclick='return addComment.moveForm( "comment-918", "918", "respond", "16" )' aria-label='Reply to mayers'>Reply</a></div></article><ul class="children">
<li id="li-comment-924" class="comment byuser comment-author-john bypostauthor odd alt depth-2"><article id="comment-924" class="comment"><footer><div class="comment-meta commentmetadata"><a href="https://www.johnlamp.net/cmake-tutorial-2-ide-integration.html#comment-924"><time pubdate date-time="2014-11-15T22:34:55+00:00">2014-11-15 at 22:34:55</time></a></div><div class="comment-author vcard"><img alt='' src='https://secure.gravatar.com/avatar/a148d7f6a3a99fbaf09dfb9a317e4380?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/a148d7f6a3a99fbaf09dfb9a317e4380?s=80&amp;d=mm&amp;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /><cite class="fn"><a href='http://JohnLamp.net' rel='external nofollow' class='url'>John Lamp</a></cite> <span class="says">said:</span></div></footer><div class="comment-content"><p>For both RUN_TESTS and INSTALL (which has not been discussed yet) simply build them as you would any other target. This is unusual behavior in an IDE but if I had to guess I would say that CMake was designed with <code>make</code> in mind over IDE support, again I&#8217;m just guessing.</p>
</div><div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://www.johnlamp.net/cmake-tutorial-2-ide-integration.html?replytocom=924#respond' onclick='return addComment.moveForm( "comment-924", "924", "respond", "16" )' aria-label='Reply to John Lamp'>Reply</a></div></article></li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
<li id="li-comment-1028" class="comment even thread-odd thread-alt depth-1"><article id="comment-1028" class="comment"><footer><div class="comment-meta commentmetadata"><a href="https://www.johnlamp.net/cmake-tutorial-2-ide-integration.html#comment-1028"><time pubdate date-time="2015-03-25T04:39:08+00:00">2015-03-25 at 04:39:08</time></a></div><div class="comment-author vcard"><img alt='' src='https://secure.gravatar.com/avatar/b178fbd58e19ea54b1e72a18dc5df045?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/b178fbd58e19ea54b1e72a18dc5df045?s=80&amp;d=mm&amp;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /><cite class="fn">DrTobbe</cite> <span class="says">said:</span></div></footer><div class="comment-content"><p>Hi and thanks for your nice tutorial. I just wanted to tell you that I get an &#8220;403 Forbidden&#8221; for all of your images/screenshots. Nevertheless, I can follow the tutorial but it seems to me that this is not what you intended.</p>
</div><div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://www.johnlamp.net/cmake-tutorial-2-ide-integration.html?replytocom=1028#respond' onclick='return addComment.moveForm( "comment-1028", "1028", "respond", "16" )' aria-label='Reply to DrTobbe'>Reply</a></div></article><ul class="children">
<li id="li-comment-1060" class="comment byuser comment-author-john bypostauthor odd alt depth-2"><article id="comment-1060" class="comment"><footer><div class="comment-meta commentmetadata"><a href="https://www.johnlamp.net/cmake-tutorial-2-ide-integration.html#comment-1060"><time pubdate date-time="2015-05-02T18:44:30+00:00">2015-05-02 at 18:44:30</time></a></div><div class="comment-author vcard"><img alt='' src='https://secure.gravatar.com/avatar/a148d7f6a3a99fbaf09dfb9a317e4380?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/a148d7f6a3a99fbaf09dfb9a317e4380?s=80&amp;d=mm&amp;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /><cite class="fn"><a href='http://JohnLamp.net' rel='external nofollow' class='url'>John Lamp</a></cite> <span class="says">said:</span></div></footer><div class="comment-content"><p>Thank you for the comment. I made a mistake and it is now fixed.</p>
</div><div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://www.johnlamp.net/cmake-tutorial-2-ide-integration.html?replytocom=1060#respond' onclick='return addComment.moveForm( "comment-1060", "1060", "respond", "16" )' aria-label='Reply to John Lamp'>Reply</a></div></article></li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
<li id="li-comment-1029" class="comment even thread-even depth-1"><article id="comment-1029" class="comment"><footer><div class="comment-meta commentmetadata"><a href="https://www.johnlamp.net/cmake-tutorial-2-ide-integration.html#comment-1029"><time pubdate date-time="2015-03-26T15:44:02+00:00">2015-03-26 at 15:44:02</time></a></div><div class="comment-author vcard"><img alt='' src='https://secure.gravatar.com/avatar/ada8f2c41ec630fd97a051b3369e8d59?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/ada8f2c41ec630fd97a051b3369e8d59?s=80&amp;d=mm&amp;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /><cite class="fn"><a href='http://blog.florianwolters.de' rel='external nofollow' class='url'>Florian Wolters</a></cite> <span class="says">said:</span></div></footer><div class="comment-content"><p>In my opinion, the open source IDE <a href="http://doc.qt.io/qtcreator" rel="nofollow">Qt Creator</a> (<b>not</b> specifc for Qt project development) has the best &#8220;CMake&#8221; integration so far. It doesn&#8217;t require a specific &#8220;CMake&#8221; generator. You can read more about it in the article <a href="http://doc.qt.io/qtcreator/creator-project-cmake.html" rel="nofollow">Setting Up a CMake Project</a>.</p>
<p>The &#8220;CMake&#8221; integration in the commercial IDE <a href="https://www.jetbrains.com/clion" rel="nofollow">CLion</a> also looks promising, though I do not have tested it yet.</p>
</div><div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://www.johnlamp.net/cmake-tutorial-2-ide-integration.html?replytocom=1029#respond' onclick='return addComment.moveForm( "comment-1029", "1029", "respond", "16" )' aria-label='Reply to Florian Wolters'>Reply</a></div></article><ul class="children">
<li id="li-comment-1061" class="comment byuser comment-author-john bypostauthor odd alt depth-2"><article id="comment-1061" class="comment"><footer><div class="comment-meta commentmetadata"><a href="https://www.johnlamp.net/cmake-tutorial-2-ide-integration.html#comment-1061"><time pubdate date-time="2015-05-02T18:49:36+00:00">2015-05-02 at 18:49:36</time></a></div><div class="comment-author vcard"><img alt='' src='https://secure.gravatar.com/avatar/a148d7f6a3a99fbaf09dfb9a317e4380?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/a148d7f6a3a99fbaf09dfb9a317e4380?s=80&amp;d=mm&amp;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /><cite class="fn"><a href='http://JohnLamp.net' rel='external nofollow' class='url'>John Lamp</a></cite> <span class="says">said:</span></div></footer><div class="comment-content"><p>I agree with your opinion of Qt Creator. When I had started writing this I had only used the initial release of Qt Creator, let&#8217;s just say that the current version is significantly better. I should probably update this chapter to include at least Qt Creator. I have heard good things about JetBrains&#8217; other refactoring tools and IDEs so CLion is probably worth a look.</p>
<p>Fun fact: Qt Creator actually uses the &#8220;CodeBlocks &#8211; Unix Makefiles&#8221; or &#8220;CodeBlocks &#8211; Ninja&#8221; generators. Of course it does that for you so your statement is still valid.</p>
</div><div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://www.johnlamp.net/cmake-tutorial-2-ide-integration.html?replytocom=1061#respond' onclick='return addComment.moveForm( "comment-1061", "1061", "respond", "16" )' aria-label='Reply to John Lamp'>Reply</a></div></article></li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
<li id="li-comment-1191" class="comment even thread-odd thread-alt depth-1"><article id="comment-1191" class="comment"><footer><div class="comment-meta commentmetadata"><a href="https://www.johnlamp.net/cmake-tutorial-2-ide-integration.html#comment-1191"><time pubdate date-time="2015-11-26T15:42:28+00:00">2015-11-26 at 15:42:28</time></a></div><div class="comment-author vcard"><img alt='' src='https://secure.gravatar.com/avatar/c18ea7b56bd6d56ef6693921da87e585?s=40&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/c18ea7b56bd6d56ef6693921da87e585?s=80&amp;d=mm&amp;r=g 2x' class='avatar avatar-40 photo' height='40' width='40' /><cite class="fn"><a href='http://brenwill.com' rel='external nofollow' class='url'>Bill Hollings</a></cite> <span class="says">said:</span></div></footer><div class="comment-content"><p>Thanks for going to the trouble of putting such a comprehensive article together!</p>
<p>&#8230;Bill</p>
</div><div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://www.johnlamp.net/cmake-tutorial-2-ide-integration.html?replytocom=1191#respond' onclick='return addComment.moveForm( "comment-1191", "1191", "respond", "16" )' aria-label='Reply to Bill Hollings'>Reply</a></div></article></li><!-- #comment-## -->
        </ol>

        						<div id="respond" class="comment-respond">
				<h3 id="reply-title" class="comment-reply-title">Leave a Reply <small><a rel="nofollow" id="cancel-comment-reply-link" href="/cmake-tutorial-2-ide-integration.html#respond" style="display:none;">Cancel reply</a></small></h3>
									<form action="https://www.johnlamp.net/wp-comments-post.php" method="post" id="commentform" class="comment-form">
																			<p class="comment-notes"><span id="email-notes">Your email address will not be published.</span> Required fields are marked <span class="required">*</span></p>							<p class="comment-form-author"><label for="author">Name <span class="required">*</span></label> <input id="author" name="author" type="text" value="" size="30" aria-required='true' required='required' /></p>
<p class="comment-form-email"><label for="email">Email <span class="required">*</span></label> <input id="email" name="email" type="text" value="" size="30" aria-describedby="email-notes" aria-required='true' required='required' /></p>
<p class="comment-form-url"><label for="url">Website</label> <input id="url" name="url" type="text" value="" size="30" /></p>
												<p class="comment-form-comment"><label for="comment">Comment</label> <textarea id="comment" name="e5932-comment" cols="45" rows="8"  aria-required="true" required="required"></textarea><textarea name="comment" style="display:none" rows="1" cols="1"></textarea></p>						
						<p class="form-submit"><input name="submit" type="submit" id="submit" class="submit" value="Post Comment" /> <input type='hidden' name='comment_post_ID' value='16' id='comment_post_ID' />
<input type='hidden' name='comment_parent' id='comment_parent' value='0' />
</p>					</form>
							</div><!-- #respond -->
			</div>

  </div>
</div>


<div id="secondary" class="widget-area" role="complementary">
  <aside id="archives-2" class="widget widget_archive"><h1 class="widget-title">Archives</h1>		<ul>
	<li><a href='https://www.johnlamp.net/2015/03'>March 2015</a></li>
	<li><a href='https://www.johnlamp.net/2013/07'>July 2013</a></li>
	<li><a href='https://www.johnlamp.net/2013/05'>May 2013</a></li>
	<li><a href='https://www.johnlamp.net/2013/03'>March 2013</a></li>
		</ul>
</aside><aside id="categories-2" class="widget widget_categories"><h1 class="widget-title">Categories</h1>		<ul>
	<li class="cat-item cat-item-4"><a href="https://www.johnlamp.net/category/cmake-tutorial" >CMake Tutorial</a>
</li>
		</ul>
</aside></div>

<div id="tertiary" class="widget-area" role="supplementary">
  <aside id="meta-2" class="widget widget_meta"><h1 class="widget-title">Meta</h1>			<ul>
						<li><a rel="nofollow" href="https://www.johnlamp.net/wp-login.php">Log in</a></li>
			<li><a href="https://www.johnlamp.net/feed">Entries <abbr title="Really Simple Syndication">RSS</abbr></a></li>
			<li><a href="https://www.johnlamp.net/comments/feed">Comments <abbr title="Really Simple Syndication">RSS</abbr></a></li>
<li><a href="https://wordpress.org/" title="Powered by WordPress, state-of-the-art semantic personal publishing platform.">WordPress.org</a></li>			</ul>
</aside></div>

      </div> <!-- #main .site-main -->

      <footer id="colophon" class="site-footer" role="contentinfo">
        <div class="copyright">
          Site Copyrighted &copy; 2013-2014 John Lamp all rights reserved.        </div>

        <div class="site-info">
          <a class="no-decoration" href="http://wordpress.org/" title="A Semantic Personal Publishing Platform" rel="generator"><img id="codeIsPoetry" src="https://www.johnlamp.net/wp-content/themes/tutorial-theme/images/codeIsPoetry.png" alt="Code is Poetry" /></a>        </div>

        <nav class="footer-navigation">
                    </nav>

        <div class="cleared"></div>
      </footer>
    </div> <!-- #page .hfeed .site -->

    <script type='text/javascript' src='https://www.johnlamp.net/wp-includes/js/comment-reply.min.js?ver=4.3.1'></script>
<script type='text/javascript' src='https://www.johnlamp.net/wp-content/themes/tutorial-theme/js/navigation.js?ver=20120206'></script>

  </body>
</html>
