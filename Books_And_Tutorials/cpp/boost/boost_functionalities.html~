<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
               "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
lang="en" xml:lang="en">
<head>
<title>Boost Functionalities </title>
<meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1"/>
<meta name="generator" content="Org-mode"/>
<meta name="generated" content="2013-12-26 01:41:53 "/>
<meta name="author" content=""/>
<meta name="description" content=""/>
<meta name="keywords" content=""/>
<style type="text/css">
 <!--/*--><![CDATA[/*><!--*/
  html { font-family: Times, serif; font-size: 12pt; }
  .title  { text-align: center; }
  .todo   { color: red; }
  .done   { color: green; }
  .tag    { background-color: #add8e6; font-weight:normal }
  .target { }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  p.verse { margin-left: 3% }
  pre {
	border: 1pt solid #AEBDCC;
	background-color: #F3F5F7;
	padding: 5pt;
	font-family: courier, monospace;
        font-size: 90%;
        overflow:auto;
  }
  table { border-collapse: collapse; }
  td, th { vertical-align: top; }
  dt { font-weight: bold; }
  div.figure { padding: 0.5em; }
  div.figure p { text-align: center; }
  textarea { overflow-x: auto; }
  .linenr { font-size:smaller }
  .code-highlighted {background-color:#ffff00;}
  .org-info-js_info-navigation { border-style:none; }
  #org-info-js_console-label { font-size:10px; font-weight:bold;
                               white-space:nowrap; }
  .org-info-js_search-highlight {background-color:#ffff00; color:#000000;
                                 font-weight:bold; }
  /*]]>*/-->
</style>
<script type="text/javascript">
<!--/*--><![CDATA[/*><!--*/
 function CodeHighlightOn(elem, id)
 {
   var target = document.getElementById(id);
   if(null != target) {
     elem.cacheClassElem = elem.className;
     elem.cacheClassTarget = target.className;
     target.className = "code-highlighted";
     elem.className   = "code-highlighted";
   }
 }
 function CodeHighlightOff(elem, id)
 {
   var target = document.getElementById(id);
   if(elem.cacheClassElem)
     elem.className = elem.cacheClassElem;
   if(elem.cacheClassTarget)
     target.className = elem.cacheClassTarget;
 }
/*]]>*///-->
</script>
</head>
<body>
<div id="content">

<h1 class="title">Boost Functionalities </h1>


<meta http-equiv="Content-Style-Type" content="text/css">
<link rel="stylesheet" href="org-style.css" type="text/css" />
<style type="text/css"/><!--
  pre.display { font-family:inherit }
  pre.format  { font-family:inherit }
  pre.smalldisplay { font-family:inherit; font-size:smaller }
  pre.smallformat  { font-family:inherit; font-size:smaller }
  pre.smallexample { font-size:smaller }
  pre.smalllisp    { font-size:smaller }
  span.sc    { font-variant:small-caps }
  span.roman { font-family:serif; font-weight:normal; } 
  span.sansserif { font-family:sans-serif; font-weight:normal; } 
--></style>
<div id="postamble">
<p class="author"> Author: Pralay Patoria
<a href="mailto:ppatoria@gmail.com">&lt;ppatoria@gmail.com&gt;</a>
</p>
<p class="date"> Date: 24-12-2013</p>
</div>

<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1 type casting </a>
<ul>
<li><a href="#sec-1_1">1.1 lexical<sub>cast</sub>     : converts string to integer. </a></li>
<li><a href="#sec-1_2">1.2 numeric<sub>cast</sub>     : converts integer to string. </a></li>
<li><a href="#sec-1_3">1.3 polymorphic<sub>cast</sub> : wrapper over dynamic cast . check the object is not null and does dynamic<sub>cast</sub> . </a></li>
</ul>
</li>
<li><a href="#sec-2">2 bind </a></li>
<li><a href="#sec-3">3 lambda </a></li>
<li><a href="#sec-4">4 Any </a></li>
<li><a href="#sec-5">5 Array </a></li>
<li><a href="#sec-6">6 Smartpointers: </a>
<ul>
<li><a href="#sec-6_1">6.1 scoped<sub>ptr</sub>    : scope ptr similar to auto<sub>ptr</sub> without transfer of ownership. </a></li>
<li><a href="#sec-6_2">6.2 shared<sub>ptr</sub>    : multiple pointers can share a memory resource. Internally uses reference couting. </a></li>
<li><a href="#sec-6_3">6.3 intrusive<sub>ptr</sub> : similar to shared<sub>ptr</sub> only difference is that reference counting need to be handled explicitly by user i.e. user can have custom refrence counting. </a></li>
<li><a href="#sec-6_4">6.4 weak<sub>ptr</sub>      : to eliminate issue related to acyclic refrence when shared<sub>ptr</sub> are used. </a></li>
<li><a href="#sec-6_5">6.5 auto<sub>ptr</sub> (stl): similar to scoped pointer with transfer of ownership. </a></li>
<li><a href="#sec-6_6">6.6 unique<sub>ptr</sub>    : similar to auto<sub>ptr</sub> but transfer of ownership is not implicit. User have to use stl:move to transfer the ownership. </a></li>
</ul>
</li>
<li><a href="#sec-7">7 Threading: </a>
<ul>
<li><a href="#sec-7_1">7.1 <b>thread</b> :  if not detached after spawning calls stl::terminate and the program is terminated. </a>
<ul>
<li><a href="#sec-7_1_1">7.1.1 <b>detach</b> : detach from the thread before goes out of scope and destructer is called. </a></li>
<li><a href="#sec-7_1_2">7.1.2 <b>join</b>   : join before going out of scope and destructer is called. </a></li>
</ul>
</li>
<li><a href="#sec-7_2">7.2 <b>scoped<sub>thread</sub></b> :(RAII) is a scoped thread and it either gets detached or join or interuppted. </a>
<ul>
<li><a href="#sec-7_2_1">7.2.1 interuppt<sub>and</sub><sub>join</sub><sub>if</sub><sub>joinable</sub> </a></li>
<li><a href="#sec-7_2_2">7.2.2 join<sub>if</sub><sub>joinable</sub> </a></li>
<li><a href="#sec-7_2_3">7.2.3 detach </a></li>
</ul></li>
</ul>
</li>
<li><a href="#sec-8">8 synchronization objects </a>
<ul>
<li><a href="#sec-8_1">8.1 mutex </a></li>
<li><a href="#sec-8_2">8.2 recursive<sub>mutex</sub> </a></li>
<li><a href="#sec-8_3">8.3 shared<sub>mutex</sub>: read only lock shared between all the threads who are using shared<sub>mutex</sub>. </a></li>
<li><a href="#sec-8_4">8.4 conditional<sub>variable</sub> : have method notify<sub>one</sub> and notify<sub>all</sub>. used in conjunction with bool conditional variable. </a></li>
</ul>
</li>
<li><a href="#sec-9">9 locks </a>
<ul>
<li><a href="#sec-9_1">9.1 lock<sub>quard</sub> : RAII </a></li>
<li><a href="#sec-9_2">9.2 unique<sub>quard</sub> </a></li>
<li><a href="#sec-9_3">9.3 atomic </a></li>
</ul>
</li>
</ul>
</div>
</div>


<div id="outline-container-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> type casting </h2>
<div class="outline-text-2" id="text-1">


</div>

<div id="outline-container-1_1" class="outline-3">
<h3 id="sec-1_1"><span class="section-number-3">1.1</span> lexical<sub>cast</sub>     : converts string to integer. </h3>
<div class="outline-text-3" id="text-1_1">

</div>

</div>

<div id="outline-container-1_2" class="outline-3">
<h3 id="sec-1_2"><span class="section-number-3">1.2</span> numeric<sub>cast</sub>     : converts integer to string. </h3>
<div class="outline-text-3" id="text-1_2">

</div>

</div>

<div id="outline-container-1_3" class="outline-3">
<h3 id="sec-1_3"><span class="section-number-3">1.3</span> polymorphic<sub>cast</sub> : wrapper over dynamic cast . check the object is not null and does dynamic<sub>cast</sub> . </h3>
<div class="outline-text-3" id="text-1_3">


</div>
</div>

</div>

<div id="outline-container-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> bind </h2>
<div class="outline-text-2" id="text-2">

<ul>
<li>
bind the fundtion and parameters and returns functors. Used while passing function as parameter.

</li>
</ul>
</div>

</div>

<div id="outline-container-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> lambda </h2>
<div class="outline-text-2" id="text-3">

<ul>
<li>
<b>labda expression:</b> passing lamda expression as parameter.

</li>
</ul>
</div>

</div>

<div id="outline-container-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> Any </h2>
<div class="outline-text-2" id="text-4">


</div>

</div>

<div id="outline-container-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> Array </h2>
<div class="outline-text-2" id="text-5">


</div>

</div>

<div id="outline-container-6" class="outline-2">
<h2 id="sec-6"><span class="section-number-2">6</span> Smartpointers: </h2>
<div class="outline-text-2" id="text-6">

<ul>
<li>
Handles deallocation and exception.

</li>
</ul>

</div>

<div id="outline-container-6_1" class="outline-3">
<h3 id="sec-6_1"><span class="section-number-3">6.1</span> scoped<sub>ptr</sub>    : scope ptr similar to auto<sub>ptr</sub> without transfer of ownership. </h3>
<div class="outline-text-3" id="text-6_1">

</div>

</div>

<div id="outline-container-6_2" class="outline-3">
<h3 id="sec-6_2"><span class="section-number-3">6.2</span> shared<sub>ptr</sub>    : multiple pointers can share a memory resource. Internally uses reference couting. </h3>
<div class="outline-text-3" id="text-6_2">

</div>

</div>

<div id="outline-container-6_3" class="outline-3">
<h3 id="sec-6_3"><span class="section-number-3">6.3</span> intrusive<sub>ptr</sub> : similar to shared<sub>ptr</sub> only difference is that reference counting need to be handled explicitly by user i.e. user can have custom refrence counting. </h3>
<div class="outline-text-3" id="text-6_3">

</div>

</div>

<div id="outline-container-6_4" class="outline-3">
<h3 id="sec-6_4"><span class="section-number-3">6.4</span> weak<sub>ptr</sub>      : to eliminate issue related to acyclic refrence when shared<sub>ptr</sub> are used. </h3>
<div class="outline-text-3" id="text-6_4">

</div>

</div>

<div id="outline-container-6_5" class="outline-3">
<h3 id="sec-6_5"><span class="section-number-3">6.5</span> auto<sub>ptr</sub> (stl): similar to scoped pointer with transfer of ownership. </h3>
<div class="outline-text-3" id="text-6_5">

</div>

</div>

<div id="outline-container-6_6" class="outline-3">
<h3 id="sec-6_6"><span class="section-number-3">6.6</span> unique<sub>ptr</sub>    : similar to auto<sub>ptr</sub> but transfer of ownership is not implicit. User have to use stl:move to transfer the ownership. </h3>
<div class="outline-text-3" id="text-6_6">


</div>
</div>

</div>

<div id="outline-container-7" class="outline-2">
<h2 id="sec-7"><span class="section-number-2">7</span> Threading: </h2>
<div class="outline-text-2" id="text-7">


</div>

<div id="outline-container-7_1" class="outline-3">
<h3 id="sec-7_1"><span class="section-number-3">7.1</span> <b>thread</b> :  if not detached after spawning calls stl::terminate and the program is terminated. </h3>
<div class="outline-text-3" id="text-7_1">


</div>

<div id="outline-container-7_1_1" class="outline-4">
<h4 id="sec-7_1_1"><span class="section-number-4">7.1.1</span> <b>detach</b> : detach from the thread before goes out of scope and destructer is called. </h4>
<div class="outline-text-4" id="text-7_1_1">

</div>

</div>

<div id="outline-container-7_1_2" class="outline-4">
<h4 id="sec-7_1_2"><span class="section-number-4">7.1.2</span> <b>join</b>   : join before going out of scope and destructer is called. </h4>
<div class="outline-text-4" id="text-7_1_2">


</div>
</div>

</div>

<div id="outline-container-7_2" class="outline-3">
<h3 id="sec-7_2"><span class="section-number-3">7.2</span> <b>scoped<sub>thread</sub></b> :(RAII) is a scoped thread and it either gets detached or join or interuppted. </h3>
<div class="outline-text-3" id="text-7_2">


</div>

<div id="outline-container-7_2_1" class="outline-4">
<h4 id="sec-7_2_1"><span class="section-number-4">7.2.1</span> interuppt<sub>and</sub><sub>join</sub><sub>if</sub><sub>joinable</sub> </h4>
<div class="outline-text-4" id="text-7_2_1">

</div>

</div>

<div id="outline-container-7_2_2" class="outline-4">
<h4 id="sec-7_2_2"><span class="section-number-4">7.2.2</span> join<sub>if</sub><sub>joinable</sub> </h4>
<div class="outline-text-4" id="text-7_2_2">

</div>

</div>

<div id="outline-container-7_2_3" class="outline-4">
<h4 id="sec-7_2_3"><span class="section-number-4">7.2.3</span> detach </h4>
<div class="outline-text-4" id="text-7_2_3">


</div>
</div>
</div>

</div>

<div id="outline-container-8" class="outline-2">
<h2 id="sec-8"><span class="section-number-2">8</span> synchronization objects </h2>
<div class="outline-text-2" id="text-8">


</div>

<div id="outline-container-8_1" class="outline-3">
<h3 id="sec-8_1"><span class="section-number-3">8.1</span> mutex </h3>
<div class="outline-text-3" id="text-8_1">

</div>

</div>

<div id="outline-container-8_2" class="outline-3">
<h3 id="sec-8_2"><span class="section-number-3">8.2</span> recursive<sub>mutex</sub> </h3>
<div class="outline-text-3" id="text-8_2">

</div>

</div>

<div id="outline-container-8_3" class="outline-3">
<h3 id="sec-8_3"><span class="section-number-3">8.3</span> shared<sub>mutex</sub>: read only lock shared between all the threads who are using shared<sub>mutex</sub>. </h3>
<div class="outline-text-3" id="text-8_3">

</div>

</div>

<div id="outline-container-8_4" class="outline-3">
<h3 id="sec-8_4"><span class="section-number-3">8.4</span> conditional<sub>variable</sub> : have method notify<sub>one</sub> and notify<sub>all</sub>. used in conjunction with bool conditional variable. </h3>
<div class="outline-text-3" id="text-8_4">


</div>
</div>

</div>

<div id="outline-container-9" class="outline-2">
<h2 id="sec-9"><span class="section-number-2">9</span> locks </h2>
<div class="outline-text-2" id="text-9">


</div>

<div id="outline-container-9_1" class="outline-3">
<h3 id="sec-9_1"><span class="section-number-3">9.1</span> lock<sub>quard</sub> : RAII </h3>
<div class="outline-text-3" id="text-9_1">

</div>

</div>

<div id="outline-container-9_2" class="outline-3">
<h3 id="sec-9_2"><span class="section-number-3">9.2</span> unique<sub>quard</sub> </h3>
<div class="outline-text-3" id="text-9_2">

</div>

</div>

<div id="outline-container-9_3" class="outline-3">
<h3 id="sec-9_3"><span class="section-number-3">9.3</span> atomic </h3>
<div class="outline-text-3" id="text-9_3">



</div>
</div>
</div>
<div id="postamble">
<p class="date"> Date: 2013-12-26 01:41:53 </p>
</div>
</div>
</body>
</html>
