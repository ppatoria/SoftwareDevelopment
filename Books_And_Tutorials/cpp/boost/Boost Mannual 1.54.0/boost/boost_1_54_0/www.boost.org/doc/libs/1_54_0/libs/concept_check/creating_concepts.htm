<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<!-- Copyright (c) Jeremy Siek and Andrew Lumsdaine 2000 -->
<!-- Distributed under the Boost -->
<!-- Software License, Version 1.0. (See accompanying -->
<!-- file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt) -->


<!-- Mirrored from www.boost.org/doc/libs/1_54_0/libs/concept_check/creating_concepts.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 15 Sep 2013 18:11:48 GMT -->
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta name="generator" content=
  "HTML Tidy for Linux/x86 (vers 1 September 2005), see www.w3.org" />

  <title>Creating Concept Checking Classes - 1.54.0</title>
  <link rel="stylesheet" href="http://www.boost.org/doc/libs/1_54_0/rst.css" type="text/css" />
<link rel="icon" href="http://www.boost.org/favicon.ico" type="image/ico"><link rel="stylesheet" type="text/css" href="http://www.boost.org/style-v2/section-basic.css"></head>

<body bgcolor="#FFFFFF" link="#0000EE" text="#000000" vlink="#551A8B" alink=
"#FF0000">  <div id="boost-common-heading-doc">
    <div class="heading-inner">
  <div class="heading-placard"></div>

  <h1 class="heading-title">
  <a href="http://www.boost.org/">
  <img src="http://www.boost.org/gfx/space.png" alt= "Boost C++ Libraries" class="heading-logo" />
  <span class="heading-boost">Boost</span>
  <span class="heading-cpplibraries">C++ Libraries</span>
  </a></h1>

  <p class="heading-quote">
  <q>...one of the most highly
  regarded and expertly designed C++ library projects in the
  world.</q> <span class="heading-attribution">&mdash; <a href=
  "http://www.gotw.ca/" class="external">Herb Sutter</a> and <a href=
  "http://en.wikipedia.org/wiki/Andrei_Alexandrescu" class="external">Andrei
  Alexandrescu</a>, <a href=
  "http://safari.awprofessional.com/?XmlId=0321113586" class="external">C++
  Coding Standards</a></span></p>
</div>
<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-33761719-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>

  </div>

  <div id="boost-common-heading-doc-spacer"></div>

  

  <h2><a name="creating-concept-checks" id="creating-concept-checks">Creating
  Concept Checking Classes</a></h2>

  <p>As an example of how to create a concept checking class template, we
  look at how to create the corresponding checks for the <a href=
  "http://www.sgi.com/tech/stl/InputIterator.html">InputIterator</a> concept.
  The complete definition is here:</p>
  <pre>
template &lt;class X&gt;
struct InputIterator
  : Assignable&lt;X&gt;, EqualityComparable&lt;X&gt;
{
 private:
    typedef std::iterator_traits&lt;X&gt; t;
 public:
    typedef typename t::value_type value_type;
    typedef typename t::difference_type difference_type;
    typedef typename t::reference reference;
    typedef typename t::pointer pointer;
    typedef typename t::iterator_category iterator_category;

    BOOST_CONCEPT_ASSERT((SignedInteger&lt;difference_type&gt;));
    BOOST_CONCEPT_ASSERT((Convertible&lt;iterator_category, std::input_iterator_tag&gt;));
        
    BOOST_CONCEPT_USAGE(InputIterator)
    {
        X j(i);             <font color=
"green">// require copy construction</font>
        same_type(*i++,v);  <font color=
"green">// require postincrement-dereference returning value_type</font>
        X&amp; x = ++j;         <font color=
"green">// require preincrement returning X&amp;</font>
    }
    
 private:
    X i;
    value_type v;

    <font color=
"green">// Type deduction will fail unless the arguments have the same type.</font>
    template &lt;typename T&gt;
    void same_type(T const&amp;, T const&amp;);
};
</pre>

  <h3>Walkthrough</h3>

  <p>First, as a convention we name the concept checking class after the
  concept. Next, since InputIterator is a refinement of Assignable and
  EqualityComparable, we derive its concept checking class from the checking
  classes for those other concepts. The library will automatically check for
  conformance to Assignable and EqualityComparable whenever it checks the
  InputIterator concept.</p>

  <p>Next, we declare the concept's <a href=
  "http://www.boost.org/more/generic_programming.html#associated_type">associated types</a>
  as member typedefs. The associated difference type is required to be a
  signed integer, and the iterator category has to be convertible to
  std::input_iterator_tag, so we assert those relationships. The syntax for
  accessing associated types through the concept-checking template mirrors
  the <a href=
  "http://www.generic-programming.org/languages/conceptcpp/">proposed</a>
  syntax for associated type access in C++0x Finally, we use the
  <code>BOOST_CONCEPT_USAGE</code> macro to declare the function that
  exercises all the concept's valid expressions. Note that at this point you
  may sometimes need to be a little creative: for example, to check that
  <code>*i++</code> returns the iterator's value type, we pass both values to
  the <code>same_type</code> member function template, which requires both
  arguments to have the same type, modulo references and cv-qualification.
  It's an imperfect check, but it's better than nothing.</p>

  <h3>Values for Usage Patterns Should Be Data Members</h3>

  <p>You may be wondering why we declared <code>i</code> and <code>v</code>
  as data members in the example above. Why didn't we simply write the
  following?</p>
  <pre>
BOOST_CONCEPT_USAGE(InputIterator)
{
    X i;                <font color=
"green">// create the values we need</font>
    value_type v;

    X j(i);             <font color=
"green">// require copy construction</font>
    same_type(*i++,v);  <font color=
"green">// require postincrement-dereference returning value_type</font>
    X&amp; x = ++j;         <font color=
"green">// require preincrement returning X&amp;</font>
}
</pre>

  <p>Unfortunately, that code wouldn't have worked out so well, because it
  unintentionally imposes the requirement that <code>X</code> and its value
  type are both default-constructible. On the other hand, since instances of
  the <code>InputIterator</code> template will never be constructed, the
  compiler never has to check how its data members will be constructed (C++
  Standard Section 14.7.1 9). For that reason you should <strong>always
  declare values needed for usage patterns as data members</strong>.</p>

  <p>These sorts of errors in concept definitions can be detected by the use
  of <a href="http://www.boost.org/doc/libs/1_54_0/libs/concept_check/concept_covering.htm">Concept Archetypes</a>, but it's always
  better to avoid them pre-emptively.</p>

  <h3>Similarity to Proposed C++0x Language Support for Concepts</h3>

  <p>This library's syntaxes for concept refinement and for access of
  associated types mirrors the corresponding <a href=
  "http://www.generic-programming.org/languages/conceptcpp/">proposed</a>
  syntaxes in C++0x. However, C++0x will use
  “signatures” rather than usage patterns to
  describe the valid operations on types participating in a concept, so when
  converting your concept checking classes into language-supported concepts,
  you'll need to translate your usage function into a series of
  signatures.</p>

  <p><a href="http://www.boost.org/doc/libs/1_54_0/libs/concept_check/concept_covering.htm">Next: Concept Covering and
  Archetypes</a><br />
  <a href="http://www.boost.org/doc/libs/1_54_0/libs/concept_check/using_concept_check.htm">Prev: Using Concept
  Checks</a><br /></p>
  <hr />

  <table>
    <tr valign="top">
      <td nowrap="nowrap">Copyright &copy; 2000</td>

      <td><a href="http://www.boost.org/people/jeremy_siek.htm">Jeremy Siek</a>(<a href=
      "mailto:jsiek@osl.iu.edu">jsiek@osl.iu.edu</a>) Andrew
      Lumsdaine(<a href="mailto:lums@osl.iu.edu">lums@osl.iu.edu</a>),
        2007 <a href="mailto:dave@boost-consulting.com">David Abrahams</a>.
    </tr>
  </table>
</body>

<!-- Mirrored from www.boost.org/doc/libs/1_54_0/libs/concept_check/creating_concepts.htm by HTTrack Website Copier/3.x [XR&CO'2008], Sun, 15 Sep 2013 18:11:48 GMT -->
</html>
