<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head profile="http://gmpg.org/xfn/11">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />

<title>Shattered Terminal  &raquo; Blog Archive   &raquo; C++&#8217;s scoped_ptr and unique_ptr smart pointers</title>

<link type="text/css" rel="stylesheet" href="http://shatteredterminal.com/wp-content/themes/simplistic/style.css" media="screen">
<link type="text/css" rel="stylesheet" href="/sh.css">
<link rel="alternate" type="application/rss+xml" title="Shattered Terminal RSS Feed" href="http://feeds.feedburner.com/ShatteredTerminal">
<link rel="pingback" href="http://shatteredterminal.com/xmlrpc.php">

<link rel="alternate" type="application/rss+xml" title="Shattered Terminal &raquo; C++&#8217;s scoped_ptr and unique_ptr smart pointers Comments Feed" href="http://shatteredterminal.com/2008/11/scoped_ptr-and-unique_ptr-smart-pointers/feed/" />
<link rel='stylesheet' id='sociable-front-css-css'  href='http://shatteredterminal.com/wp-content/plugins/sociable/sociable.css?ver=2.9.1' type='text/css' media='' />
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://shatteredterminal.com/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://shatteredterminal.com/wp-includes/wlwmanifest.xml" /> 
<link rel='index' title='Shattered Terminal' href='http://shatteredterminal.com' />
<link rel='start' title='The First Post' href='http://shatteredterminal.com/2008/10/the-first-post/' />
<link rel='prev' title='GMail Themes (and its launch faux pas)' href='http://shatteredterminal.com/2008/11/gmail-themes-and-launch-faux-pa/' />
<link rel='next' title='Child sending naked picture of herself persecuted&#8230;' href='http://shatteredterminal.com/2008/11/a-child-sending-naked-picture-of-herself-persecuted/' />
<meta name="generator" content="WordPress 2.9.1" />
<link rel='canonical' href='http://shatteredterminal.com/2008/11/scoped_ptr-and-unique_ptr-smart-pointers/' />
		<style type="text/css">
						ol.footnotes li {list-style-type:decimal;}
						ol.footnotes{font-size:0.8em; color:#666666;}		</style>
		</head>
<body>
<div class="page">
<div id="header">
 <div id="headerimg">
  <h1><a href="http://shatteredterminal.com/">Shattered Terminal</a></h1>
  <div class="description">i don&#8217;t have a tagline yet</div>
 </div>
</div>
<div id="top-nav">
 <div class="tab">
  <a class="t"><b class="t"><b class="t">Blog</b></b></a>
 </div>
 <div class="tab">
  <a class="t"><b class="t"><b class="t">About</b></b></a>
 </div>
</div>
</div>
<div class="line"></div>
<div class="page">
	<div id="content" class="narrowcolumn">

	
		<div class="navigation">
			<div class="alignleft">&laquo; <a href="http://shatteredterminal.com/2008/11/gmail-themes-and-launch-faux-pa/" rel="prev">GMail Themes (and its launch faux pas)</a></div>
			<div class="alignright"><a href="http://shatteredterminal.com/2008/11/a-child-sending-naked-picture-of-herself-persecuted/" rel="next">Child sending naked picture of herself persecuted&#8230;</a> &raquo;</div>
		</div>

		<div class="post" id="post-91">
			<h2>C++&#8217;s scoped_ptr and unique_ptr smart pointers</h2>

			<div class="entry">
				<p>I got bitten again just the other day when I was modifying old code. It crashed. Yes, I added an extra delete when one is not required resulting in a double deletion. It reinforced my belief that most pointers in C++ should be smart pointers. A new C++ programmers will be caught often for memory leaks for forgetting to delete a pointer. As you get more experienced, while forgetting to delete becomes far less of a problem, double deletion becomes more rampant (Hey! It&#8217;s hard to keep track of object ownership you know? Especially when you&#8217;re rushing to modify other people&#8217;s code before deadline&#8230;)</p>
<h3>scoped_ptr</h3>
<p>To the rescue is Boost <a href="http://www.boost.org/doc/libs/1_37_0/libs/smart_ptr/scoped_ptr.htm"><code>scoped_ptr</code></a> smart pointer. There are two main reasons, in my opinion, to use scoped pointers.</p>
<p>Scoped pointers ease manual memory management. It holds a pointer to the object that it manage and it performs automatic deletion of the object it holds when it is deleted. The scoped_ptr object itself is a templated auto pointer, which means that it will be deleted automatically when it goes out of scope. Here is a simple, incomplete implementation of scoped_ptr:</p>
<pre name="code" class="cpp">template &lt;typename T&gt;
class scoped_ptr : noncopyable {
 public:
  explicit scoped_ptr(T* p = NULL) { p_ = p; }
  ~scoped_ptr() {
    if (p_ != NULL) delete p_;
  }
  void reset(T* p = NULL) {
    if (p_) delete p_;
    p_ = p;
  }

  // Some implementation may choose
  // to crash if p_ is NULL for the
  // following 3 operators.
  T&amp; operator*() const { return *p_; }
  T* operator-&gt;() const { return p_; }
  T* get() const { return p_; }
 private:
  T* p_;
};</pre>
<p>Let&#8217;s analyze the class. It extends Boost&#8217;s <code>noncopyable</code> interface (some would prefer to use macro for this), which implies that a <code>scoped_ptr</code> object may not be copied or assigned to another scoped_ptr. It induces a strict ownership of the owned pointer. As you see above, the destructor of <code>scoped_ptr</code> simply delete the held pointer, similarly with <code>reset(T*)</code> method.</p>
<p>This brings us to a second, more important point. scoped_ptr enforces a strict ownership of an object. In another word, it forces us programmers to think and then rethink about the ownership of an object. Many times, the problem with C++ developers are not forgetting to delete. It is not knowing who exactly owns an object. For example, let&#8217;s check out the following really simple class definition:</p>
<pre name="code" class="cpp">class ConfusedClass {
 public:
  ConfusedClass() {}
  ~ConfusedClass() {}
  void DoSomething() {
     a_ = b_.PerformSomething();
  }
  AnotherClass* GetA() { return a_; }
 private:
  AnotherClass* a_;
  YetAnotherClass b_;
};</pre>
<p>In a world without <code>scoped_ptr</code>, this class can be really confusing. Who owns the object held by <code>a_</code>? Is it <code>b_</code>? Is it <code>ConfusedClass</code>? Or is it the class who calls <code>GetA</code>? The last option looks unlikely here. But it&#8217;s pretty hard to differentiate between the first two cases! A subsequent reader of the class definition would probably need to dig <code>YetAnotherClass</code> to determines that information. (Note also that the destructor is empty, it can be that <code>b_</code> holds the object held by <code>a_</code>, or&#8230; it can be a bug—forgetting to delete <code>a_</code>!)</p>
<p>With <code>scoped_ptr</code>, when we write <code>ConfusedClass</code>, we should be thinking about the ownership of the object held by <code>a_</code>. And if we think this class should owns it, we should use <code>scoped_ptr&lt;AnotherClass&gt; a_</code> instead! That way, subsequent reader of the class definition knows for sure that the object is owned by <code>ConfusedClass</code> (or shall we call it <code>SmartClass</code> now).</p>
<p>As a bonus, code with multiple exit path will be easily managed with <code>scoped_ptr</code> (instead of hunting each exit path and making sure all the pointers that should be deleted are deleted). Imagine how troublesome it is to manage a method with a throw for example. (I remembered writing a Java code where I&#8217;ve had to always have 3 if blocks in the <code>finally</code> part of a <code>try-catch-finally</code>, to actually check for null and close a <code>ResultSet</code>, a <code>PreparedStatement</code>, and an <code>SqlConnection</code>. In C++, I&#8217;ll simply write a wrapper similar to <code>scoped_ptr</code> to perform the closing.)</p>
<h3>unique_ptr</h3>
<p>C++0x expands the smart pointer repertoire even more with <code>unique_ptr</code> (Committee Draft §20.8.12). This smart pointer has a strict ownership as with scoped pointer. However, it is MoveConstructible and MoveAssignable (as described by the CD). What those jargons mean is that a <code>unique_ptr s</code> can be constructed with parameter of another <code>unique_ptr u</code> with a corresponding ownership transfer of the held object from u to s (MoveConstructible) and a <code>unique_ptr u</code> can be assigned to another <code>unique_ptr s</code> with ownership of the owned object transferred from u to s (MoveAssignable).</p>
<p>This pointer adds a little extra value to scoped pointer version. That is, you can transfer ownership (there is no release method in scoped pointer, while <code>unique_ptr</code> has not just a move constructor and move assignment, but also an explicit <code>release</code> method). This is basically a better version of <code>std::auto_ptr</code> (I&#8217;ve heard talk of making auto pointer deprecated).</p>
<p>To effectively used smart pointer, use the correct smart pointer for each of your needs. If you need a strict ownership semantics without any trasnfer, use <code>scoped_ptr</code>. If you need ability to transfer ownership in addition to that, use <code>unique_ptr</code> (or <code>std::auto_ptr</code>). Even better, make such rules part of your software/company&#8217;s style guide. Future maintainers will thank you when he can easily see an orderly semantics in the chaos.</p>
<h3>shared_ptr</h3>
<p>There is another smart pointer introduced in C++0x. The name is <code>shared_ptr</code> (CD &sect; 2.8.13.2). This pointer is basically a referenced-counting smart pointers that implements shared ownership of the held object. When the last <code>shared_ptr</code> holding the particular object is destructed, the object is deleted too. Now, I won&#8217;t delve too much into this smart pointer because I believe in strict ownership as opposed to shared one. There should be a very, very rare situation where it demands shared ownership of an object. In a good software design, only one object should owned a particular object.</p>
<p>Now there is one place where <code>shared_ptr</code> is very, very useful: the STL containers. When you insert or retrieved a member into an STL containers, a copy of the object is made. For performance reason, keeping a pointer in the containers make lots of sense (especially when copying is expensive). As with any pointer usage, it becomes very hard to keep track of these objects. Hence the usage of <code>shared_ptr</code>. Copying a shared pointer is cheap. Additionally, there&#8217;s no risk of forgetting to delete a pointer within an STL containers. (Keep in mind that <code>shared_ptr</code> is usually twice as big as a normal pointer as it needs to keep another pointer to the reference counter.)</p>
<p>Example usage:</p>
<pre name="code" class="cpp">vector&lt;shared_ptr&lt;ClassA&gt; &gt; vector_of_a;
hash_map&lt;int, shared_ptr&lt;ClassA&gt; &gt; map_of_int_to_a;</pre>

<div class="sociable">
<div class="sociable_tagline">
<strong>Share this on:</strong>
</div>
<ul>
	<li class="sociablefirst"><a rel="nofollow"  href="http://www.printfriendly.com/print?url=http%3A%2F%2Fshatteredterminal.com%2F2008%2F11%2Fscoped_ptr-and-unique_ptr-smart-pointers%2F&amp;partner=sociable" title="Print"><img src="http://shatteredterminal.com/wp-content/plugins/sociable/images/services-sprite.gif" title="Print" alt="Print" style="width: 16px; height: 16px; background: transparent url(http://shatteredterminal.com/wp-content/plugins/sociable/images/services-sprite.png) no-repeat; background-position:-343px -37px" class="sociable-hovers" /></a></li>
	<li><a rel="nofollow"  href="http://www.facebook.com/share.php?u=http%3A%2F%2Fshatteredterminal.com%2F2008%2F11%2Fscoped_ptr-and-unique_ptr-smart-pointers%2F&amp;t=C%2B%2B%27s%20scoped_ptr%20and%20unique_ptr%20smart%20pointers" title="Facebook"><img src="http://shatteredterminal.com/wp-content/plugins/sociable/images/services-sprite.gif" title="Facebook" alt="Facebook" style="width: 16px; height: 16px; background: transparent url(http://shatteredterminal.com/wp-content/plugins/sociable/images/services-sprite.png) no-repeat; background-position:-343px -1px" class="sociable-hovers" /></a></li>
	<li><a rel="nofollow"  href="http://twitter.com/home?status=C%2B%2B%27s%20scoped_ptr%20and%20unique_ptr%20smart%20pointers%20-%20http%3A%2F%2Fshatteredterminal.com%2F2008%2F11%2Fscoped_ptr-and-unique_ptr-smart-pointers%2F" title="Twitter"><img src="http://shatteredterminal.com/wp-content/plugins/sociable/images/services-sprite.gif" title="Twitter" alt="Twitter" style="width: 16px; height: 16px; background: transparent url(http://shatteredterminal.com/wp-content/plugins/sociable/images/services-sprite.png) no-repeat; background-position:-343px -55px" class="sociable-hovers" /></a></li>
	<li><a rel="nofollow"  href="http://digg.com/submit?phase=2&amp;url=http%3A%2F%2Fshatteredterminal.com%2F2008%2F11%2Fscoped_ptr-and-unique_ptr-smart-pointers%2F&amp;title=C%2B%2B%27s%20scoped_ptr%20and%20unique_ptr%20smart%20pointers&amp;bodytext=I%20got%20bitten%20again%20just%20the%20other%20day%20when%20I%20was%20modifying%20old%20code.%20It%20crashed.%20Yes%2C%20I%20added%20an%20extra%20delete%20when%20one%20is%20not%20required%20resulting%20in%20a%20double%20deletion.%20It%20reinforced%20my%20belief%20that%20most%20pointers%20in%20C%2B%2B%20should%20be%20smart%20pointers.%20A%20new%20C" title="Digg"><img src="http://shatteredterminal.com/wp-content/plugins/sociable/images/services-sprite.gif" title="Digg" alt="Digg" style="width: 16px; height: 16px; background: transparent url(http://shatteredterminal.com/wp-content/plugins/sociable/images/services-sprite.png) no-repeat; background-position:-235px -1px" class="sociable-hovers" /></a></li>
	<li><a rel="nofollow"  href="http://delicious.com/post?url=http%3A%2F%2Fshatteredterminal.com%2F2008%2F11%2Fscoped_ptr-and-unique_ptr-smart-pointers%2F&amp;title=C%2B%2B%27s%20scoped_ptr%20and%20unique_ptr%20smart%20pointers&amp;notes=I%20got%20bitten%20again%20just%20the%20other%20day%20when%20I%20was%20modifying%20old%20code.%20It%20crashed.%20Yes%2C%20I%20added%20an%20extra%20delete%20when%20one%20is%20not%20required%20resulting%20in%20a%20double%20deletion.%20It%20reinforced%20my%20belief%20that%20most%20pointers%20in%20C%2B%2B%20should%20be%20smart%20pointers.%20A%20new%20C" title="del.icio.us"><img src="http://shatteredterminal.com/wp-content/plugins/sociable/images/services-sprite.gif" title="del.icio.us" alt="del.icio.us" style="width: 16px; height: 16px; background: transparent url(http://shatteredterminal.com/wp-content/plugins/sociable/images/services-sprite.png) no-repeat; background-position:-199px -1px" class="sociable-hovers" /></a></li>
	<li><a rel="nofollow"  href="http://www.google.com/bookmarks/mark?op=edit&amp;bkmk=http%3A%2F%2Fshatteredterminal.com%2F2008%2F11%2Fscoped_ptr-and-unique_ptr-smart-pointers%2F&amp;title=C%2B%2B%27s%20scoped_ptr%20and%20unique_ptr%20smart%20pointers&amp;annotation=I%20got%20bitten%20again%20just%20the%20other%20day%20when%20I%20was%20modifying%20old%20code.%20It%20crashed.%20Yes%2C%20I%20added%20an%20extra%20delete%20when%20one%20is%20not%20required%20resulting%20in%20a%20double%20deletion.%20It%20reinforced%20my%20belief%20that%20most%20pointers%20in%20C%2B%2B%20should%20be%20smart%20pointers.%20A%20new%20C" title="Google Bookmarks"><img src="http://shatteredterminal.com/wp-content/plugins/sociable/images/services-sprite.gif" title="Google Bookmarks" alt="Google Bookmarks" style="width: 16px; height: 16px; background: transparent url(http://shatteredterminal.com/wp-content/plugins/sociable/images/services-sprite.png) no-repeat; background-position:-91px -19px" class="sociable-hovers" /></a></li>
	<li><a  href="http://blogplay.com" title="Blogplay"><img src="http://shatteredterminal.com/wp-content/plugins/sociable/images/services-sprite.gif" title="Blogplay" alt="Blogplay" style="width: 16px; height: 16px; background: transparent url(http://shatteredterminal.com/wp-content/plugins/sociable/images/services-sprite.png) no-repeat; background-position:-199px -73px" class="sociable-hovers" /></a></li>
	<li class="sociablelast"><a rel="nofollow"  href="http://www.stumbleupon.com/submit?url=http%3A%2F%2Fshatteredterminal.com%2F2008%2F11%2Fscoped_ptr-and-unique_ptr-smart-pointers%2F&amp;title=C%2B%2B%27s%20scoped_ptr%20and%20unique_ptr%20smart%20pointers" title="StumbleUpon"><img src="http://shatteredterminal.com/wp-content/plugins/sociable/images/services-sprite.gif" title="StumbleUpon" alt="StumbleUpon" style="width: 16px; height: 16px; background: transparent url(http://shatteredterminal.com/wp-content/plugins/sociable/images/services-sprite.png) no-repeat; background-position:-217px -55px" class="sociable-hovers" /></a></li>
</ul>
</div>

								<p>Tags: <a href="http://shatteredterminal.com/tag/boost/" rel="tag">boost</a>, <a href="http://shatteredterminal.com/tag/c0x/" rel="tag">C++0x</a>, <a href="http://shatteredterminal.com/tag/memory/" rel="tag">memory</a></p>
				<p class="postmetadata alt">
					<small>
						This entry was posted
												on Sunday, November 23rd, 2008 at 3:43 am						and is filed under <a href="http://shatteredterminal.com/category/c/" title="View all posts in C++" rel="category tag">C++</a>.
						You can follow any responses to this entry through the <a href='http://shatteredterminal.com/2008/11/scoped_ptr-and-unique_ptr-smart-pointers/feed/'>RSS 2.0</a> feed.

													You can <a href="#respond">leave a response</a>, or <a href="http://shatteredterminal.com/2008/11/scoped_ptr-and-unique_ptr-smart-pointers/trackback/" rel="trackback">trackback</a> from your own site.

						
					</small>
				</p>

			</div>
		</div>

	
<!-- You can start editing here. -->

	<h3 id="comments">2 Responses to &#8220;C++&#8217;s scoped_ptr and unique_ptr smart pointers&#8221;</h3>

	<ol class="commentlist">

	
		<li class="alt" id="comment-1335">
			<img alt='' src='http://www.gravatar.com/avatar/44dae06b7b5c0047bcd2b9c68c928ad2?s=32&amp;d=http%3A%2F%2Fwww.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D32&amp;r=G' class='avatar avatar-32 photo' height='32' width='32' />			<cite>Danny77uk</cite> Says:
						<br />

			<small class="commentmetadata"><a href="#comment-1335" title="">February 4th, 2010 at 8:53 pm</a> </small>

			<p>Good article!</p>
<p>&#8220;There should be a very, very rare situation where it demands shared ownership of an object. In a good software design, only one object should owned a particular object.&#8221;</p>
<p>Actually there are many cases where shared ownership is vital &#8211; the command pattern upon which most Undo systems is based relies on the command objects sharing ownership of their pointers for example. You must also often reference the same object amongst many and you must use shared pointers for that (or use .get() and return a bald pointer but then what&#8217;s the point in using smart pointers?)</p>

		</li>

	
	
		<li id="comment-1336">
			<img alt='' src='http://www.gravatar.com/avatar/ac0227e9d220425db2d9bafc33568976?s=32&amp;d=http%3A%2F%2Fwww.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D32&amp;r=G' class='avatar avatar-32 photo' height='32' width='32' />			<cite><a href='http://shatteredterminal.com' rel='external nofollow' class='url'>shards</a></cite> Says:
						<br />

			<small class="commentmetadata"><a href="#comment-1336" title="">February 4th, 2010 at 9:15 pm</a> </small>

			<p>You&#8217;re perfectly right that there are cases where shared ownership is vital. However, many times shared ownership is really not required with a change of design, most of the time for the better. I guess what I was trying to say is that whenever a shared ownership somehow becomes needed, we should try to determine whether it is really needed.</p>
<p>In your second case, for example. I rarely saw two (or more classes) really needing an actual ownership of the same object, i.e. as a member of the class. Most of the time, 1 class (I really mean object) is the owner of the pointer, and the other object only needs it in a single method or two, and hence not needing to actually &#8220;own&#8221; the pointer. In this case, I&#8217;d pass a naked pointer that clearly indicates that the object receiving the naked pointer is not owning the pointer (but this is my coding convention, yours might vary). Here I make sure that the naked pointer is never stored as a member of any other object (or a callback).</p>
<p>Again, I&#8217;m not claiming this to be universal, there are indeed cases where shared ownership is needed.</p>
<p>(And thanks! I didn&#8217;t think the article was good. I was just hoping that it&#8217;d help beginners. I have had some good helps when I started.)</p>

		</li>

	
	
	</ol>

 


<h3 id="respond">Leave a Reply</h3>


<form action="http://shatteredterminal.com/wp-comments-post.php" method="post" id="commentform">


<p><input type="text" name="author" id="author" value="" size="22" tabindex="1" aria-required='true' />
<label for="author"><small>Name (required)</small></label></p>

<p><input type="text" name="email" id="email" value="" size="22" tabindex="2" aria-required='true' />
<label for="email"><small>Mail (will not be published) (required)</small></label></p>

<p><input type="text" name="url" id="url" value="" size="22" tabindex="3" />
<label for="url"><small>Website</small></label></p>


<!--<p><small><strong>XHTML:</strong> You can use these tags: <code>&lt;a href=&quot;&quot; title=&quot;&quot;&gt; &lt;abbr title=&quot;&quot;&gt; &lt;acronym title=&quot;&quot;&gt; &lt;b&gt; &lt;blockquote cite=&quot;&quot;&gt; &lt;cite&gt; &lt;code&gt; &lt;del datetime=&quot;&quot;&gt; &lt;em&gt; &lt;i&gt; &lt;q cite=&quot;&quot;&gt; &lt;strike&gt; &lt;strong&gt; </code></small></p>-->

<p><textarea name="comment" id="comment" cols="100%" rows="10" tabindex="4"></textarea></p>

<p><input name="submit" type="submit" id="submit" tabindex="5" value="Submit Comment" />
<input type="hidden" name="comment_post_ID" value="91" />
</p>

</form>



	
	</div>

<div id="sidebar">
 <ul>
    <li><form method="get" id="searchform" action="http://shatteredterminal.com/">
<label class="hidden" for="s">Search for:</label>
<div><input type="text" value="" name="s" id="s" />
<input type="submit" id="searchsubmit" value="Search" />
</div>
</form>
</li>
  <li><h2>By Shards</h2>
    <p>This is another of my experiment, hopefully not a short-lived one. I've attempted to keep a blog in the past and the longest attempt ran for 2 years. This is my first technical blog. Comments are welcomes, and you can contact me at shards 'et' webpage domain (proudly powered by GMail).</p></li>
  <li><h2>Syndication</h2>
<p><a href="http://feeds.feedburner.com/ShatteredTerminal" rel="alternate" type="application/rss+xml"><img src="http://www.feedburner.com/fb/images/pub/feed-icon16x16.png" alt="" style="vertical-align:middle;border:0"/></a>&nbsp;<a href="http://feeds.feedburner.com/ShatteredTerminal" rel="alternate" type="application/rss+xml">Subscribe to posts</a></p>
<p><a href="http://feeds.feedburner.com/ShatteredTerminalComments" rel="alternate" type="application/rss+xml"><img src="http://www.feedburner.com/fb/images/pub/feed-icon16x16.png" alt="" style="vertical-align:middle;border:0"/></a>&nbsp;<a href="http://feeds.feedburner.com/ShatteredTerminalComments" rel="alternate" type="application/rss+xml">Subscribe to comments</a></p></li>

  
    <li><h2>Archives</h2>
   <ul>	<li><a href='http://shatteredterminal.com/2010/04/' title='April 2010'>April 2010</a></li>
	<li><a href='http://shatteredterminal.com/2010/03/' title='March 2010'>March 2010</a></li>
	<li><a href='http://shatteredterminal.com/2009/12/' title='December 2009'>December 2009</a></li>
	<li><a href='http://shatteredterminal.com/2009/11/' title='November 2009'>November 2009</a></li>
	<li><a href='http://shatteredterminal.com/2009/10/' title='October 2009'>October 2009</a></li>
	<li><a href='http://shatteredterminal.com/2009/05/' title='May 2009'>May 2009</a></li>
	<li><a href='http://shatteredterminal.com/2009/04/' title='April 2009'>April 2009</a></li>
	<li><a href='http://shatteredterminal.com/2009/03/' title='March 2009'>March 2009</a></li>
	<li><a href='http://shatteredterminal.com/2009/02/' title='February 2009'>February 2009</a></li>
	<li><a href='http://shatteredterminal.com/2009/01/' title='January 2009'>January 2009</a></li>
	<li><a href='http://shatteredterminal.com/2008/12/' title='December 2008'>December 2008</a></li>
	<li><a href='http://shatteredterminal.com/2008/11/' title='November 2008'>November 2008</a></li>
	<li><a href='http://shatteredterminal.com/2008/10/' title='October 2008'>October 2008</a></li>
</ul>
  </li>

  <li class="categories"><h2>Categories</h2><ul>	<li class="cat-item cat-item-65"><a href="http://shatteredterminal.com/category/books/" title="View all posts filed under Books">Books</a> (1)
</li>
	<li class="cat-item cat-item-7"><a href="http://shatteredterminal.com/category/c/" title="View all posts filed under C++">C++</a> (6)
</li>
	<li class="cat-item cat-item-42"><a href="http://shatteredterminal.com/category/computer-science/" title="View all posts filed under Computer Science">Computer Science</a> (5)
</li>
	<li class="cat-item cat-item-47"><a href="http://shatteredterminal.com/category/dynamic-languages/" title="View all posts filed under Dynamic Languages">Dynamic Languages</a> (2)
</li>
	<li class="cat-item cat-item-61"><a href="http://shatteredterminal.com/category/issues/" title="View all posts filed under Issues">Issues</a> (1)
</li>
	<li class="cat-item cat-item-30"><a href="http://shatteredterminal.com/category/java/" title="View all posts filed under Java">Java</a> (3)
</li>
	<li class="cat-item cat-item-21"><a href="http://shatteredterminal.com/category/javascript/" title="View all posts filed under Javascript">Javascript</a> (6)
</li>
	<li class="cat-item cat-item-18"><a href="http://shatteredterminal.com/category/random/" title="View all posts filed under Random">Random</a> (14)
</li>
	<li class="cat-item cat-item-29"><a href="http://shatteredterminal.com/category/rant/" title="View all posts filed under Rant">Rant</a> (3)
</li>
	<li class="cat-item cat-item-16"><a href="http://shatteredterminal.com/category/scheme/" title="View all posts filed under Scheme">Scheme</a> (2)
</li>
	<li class="cat-item cat-item-58"><a href="http://shatteredterminal.com/category/science/" title="View all posts filed under Science">Science</a> (1)
</li>
	<li class="cat-item cat-item-3"><a href="http://shatteredterminal.com/category/self/" title="View all posts filed under Self">Self</a> (3)
</li>
	<li class="cat-item cat-item-51"><a href="http://shatteredterminal.com/category/software-engineering/" title="View all posts filed under Software Engineering">Software Engineering</a> (2)
</li>
	<li class="cat-item cat-item-13"><a href="http://shatteredterminal.com/category/web-programming/" title="View all posts filed under Web Programming">Web Programming</a> (4)
</li>
</ul></li>  
   </ul>
</div>
<hr />
<div id="footer">
 <p>
  Copyright (c) 2008, Shards Henry. All rights reserved.<br/>
  Shattered Terminal is proudly powered by <a href="http://wordpress.org/">WordPress</a>.
  26 queries. 1.075 seconds.
 </p>
  <script src="http://www.google-analytics.com/ga.js"></script>
 <script src="/sh.js"></script>
 <script type="text/javascript">
  _gat._getTracker("UA-3367918-4")._trackPageview();
  window.onload = function() { dp.SyntaxHighlighter.HighlightAll('code'); };
 </script>
</div>
</div>
<div style="width:100%; margin:0 auto;">
<div style="border-bottom:1px solid #acacac;"></div>
<div style="border-bottom:1px solid #8a8a8a; padding:3px 0;"></div>
<div style="border-bottom:1px solid #686868; padding-bottom:5px;"></div>
<div style="border-bottom:1px solid #464646; padding:2px 0;"></div>
<div style="border-bottom:1px solid #242424; padding-bottom:3px;"></div>
</div>
</body>
</html>